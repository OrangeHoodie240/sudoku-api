{"version":3,"sources":["SudokuCell/SudokuCell.js","SudokuGrid/SudokuGrid.js","helpers.js","SudokuPad/SudokuPad.js","MagnifiedCell/MagnifiedCell.js","HintBox/HintBox.js","SudokuBoard/SudokuBoard.js","NavBar/NavBar.js","SavedPuzzles/SavedPuzzles.js","App.js","reportWebVitals.js","index.js"],"names":["SudokuCell","cellRow","cellCol","value","given","outerCell","React","useRef","notGiven","upperCellClasses","useEffect","current","document","getElementById","id","className","SudokuGrid","setSelectedCell","sudoku","originalSudoku","invalidCell","hintCell","setHintCell","gridDiv","gridArray","i","j","push","onClick","target","parentElement","classList","remove","getAttribute","querySelector","focus","children","childrenLength","length","selectedCell","child","add","level","a","url","fetch","then","resp","ok","Error","status","json","data","catch","err","console","error","puzzle","flattenPuzzle","flatPuzzle","join","copySudoku","copy","row","convertTo2DArray","split","puzzleArray","shift","getPuzzle","SudokuPad","setSudoku","update","setPuzzleInfo","cellValuesToggleButton","notesToggleButton","sudokuPadValues","sudokuPadNotes","onClickSudokuPadToggle","evt","setAttribute","removeAttribute","style","display","addEventListener","valueDivs","noteDivs","disabled","tabindex","contains","Number","col","upperCellOfSelectedCell","innerText","trim","onKeyUp","key","includes","lowerCellOfSelectedCell","noteValue","lowerCellNotes","Math","random","lowerCellNotesLength","splice","sort","MagnifiedCell","HintBox","resetBoard","useState","hintMessage","setHintMessage","hintValue","setHintValue","position","solveWith","cellId","cell","SudokuBoard","puzzleInfo","setIsSavedPuzzleUsed","setInvalidCell","valid","setValid","orignialSudoku","setLevel","setPuzzleId","testIfInvalid","reduce","b","areDuplicates","boxes","rowA","rowB","rowC","k","isBoardValid","isBoardFull","alert","cellLength","magnifiedCell","puzzleId","loadPuzzle","for","onChange","NavBar","setViewSavedPuzzles","isSavedPuzzleUsed","email","password","loginState","setLoginState","registerState","setRegisterState","loggedInStatus","setLoggedInStatus","preventDefault","obj","headers","method","body","JSON","stringify","success","localStorage","setItem","token","updateLogin","updateRegister","getItem","logIn","onSubmit","type","placeholder","name","register","logOut","removeItem","savePuzzle","viewSavedPuzzles","updatePuzzle","SavedPuzzles","savedPuzzles","setSavedPuzzles","onLoadPuzzle","val","puzzles","loadSavedPuzzles","puzzleList","map","puzzle_id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sYAwBeA,EApBI,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,QAA2B,IAAlBC,aAAkB,MAAZ,EAAY,EAATC,EAAS,EAATA,MACxCC,EAAYC,IAAMC,OAAO,MACvBC,GAAYJ,EACZK,EAAoBL,EAAS,mBAAqB,aAMxD,OAJAE,IAAMI,WAAU,WACZL,EAAUM,QAAUC,SAASC,eAAe,eAAiBZ,EAAU,IAAMC,KAC9E,IAEK,mCACY,sBAAKY,GAAI,eAAiBb,EAAU,IAAMC,EAAS,WAAUD,EAAS,WAAUC,EAASa,UAAU,aAAa,iBAAgBP,EAAhI,UACI,qBAAKO,UAAWN,EAAhB,SAAoCD,EAAY,GAAKL,IACrD,qBAAKY,UAAU,aAAa,aAAW,WCwDpDC,G,MAnEI,SAAC,GAAqF,IAAnFC,EAAkF,EAAlFA,gBAAiBC,EAAiE,EAAjEA,OAAQC,EAAyD,EAAzDA,eAAgBC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC5EC,EAAUjB,IAAMC,OAAO,MAuC7B,IADA,IAAMiB,EAAY,GACTC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAItB,EAAkC,MAAzBe,EAAeM,GAAGC,GAC/BF,EAAUG,KAAK,cAAC,EAAD,CAAY1B,QAASwB,EAAGvB,QAASwB,EAAGvB,MAAOe,EAAOO,GAAGC,GAAItB,MAAOA,KAUvF,OANAE,IAAMI,WAAU,WACZa,EAAQZ,QAAUC,SAASC,eAAe,cAC3C,IAKC,sBAAKC,GAAG,iBAAR,UACI,qBAAKC,UAAU,eAAeD,GAAG,uBACjC,qBAAKC,UAAU,eAAeD,GAAG,wBACjC,qBAAKC,UAAU,eAAeD,GAAG,uBACjC,qBAAKC,UAAU,eAAeD,GAAG,wBACjC,qBAAKC,UAAU,WAAWD,GAAG,WAAWc,QAvDhD,YAA8B,IAAXC,EAAU,EAAVA,OACf,GAAIA,IAAWN,EAAS,CAOpB,GANAM,EAASA,EAAOC,cACbT,GAAYA,IAAaQ,IACpBR,EAASU,UAAUC,OAAO,YAC1BV,EAAY,OAG0B,UAA1CO,EAAOI,aAAa,kBAA+B,OAEvD,GAAIb,GAAeS,IAAWT,EAE1B,YADAR,SAASsB,cAAc,sBAAsBC,QAOjD,IAHA,IAAMC,EAAWb,EAAQZ,QAAQyB,SAC3BC,EAAiBD,EAASE,OAC5BC,EAAe,KACVd,EAAI,EAAGA,EAAIY,EAAgBZ,IAAK,CACrC,IAAMe,EAAQJ,EAASX,GACnBe,IAAUX,GACVW,EAAMT,UAAUU,IAAI,iBACpBF,EAAeC,GAGfA,EAAMT,UAAUC,OAAO,iBAI/Bf,EAAgBsB,GAChB3B,SAASsB,cAAc,sBAAsBC,UAyB7C,SACKX,S,2DC/DjB,WAAyBkB,GAAzB,iBAAAC,EAAA,6DACUC,EAAM,wDAA0DF,EAD1E,SAEyBG,MAAMD,GACtBE,MAAK,SAAAC,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAM,iBAAkBF,EAAKG,QAE3C,OAAOH,EAAKI,UAEfL,MAAK,SAAAM,GACF,OAAOA,EAAKA,QAEfC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAZpC,cAEUG,EAFV,yBAcWA,GAdX,4C,sBAiBA,SAASC,EAAcD,GAEnB,IADA,IAAIE,EAAa,GACTlC,EAAI,EAAGA,EAAI,EAAGA,IAClBkC,EAAWhC,KAAX,MAAAgC,EAAU,YAASF,EAAOhC,KAG9B,OAAOkC,EAAWC,KAAK,KAG3B,SAASC,EAAW3C,GAEhB,IADA,IAAM4C,EAAO,GACJrC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAExB,IADA,IAAMsC,EAAM,GACHrC,EAAI,EAAGA,EAAI,EAAGA,IACnBqC,EAAIpC,KAAKT,EAAOO,GAAGC,IAEvBoC,EAAKnC,KAAKoC,GAEd,OAAOD,EAkGX,SAASE,EAAiBP,GACtBA,EAASA,EAAOQ,MAAM,KAEtB,IADA,IAAIC,EAAc,GACVzC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAEtB,IADA,IAAIsC,EAAM,GACFrC,EAAI,EAAGA,EAAI,EAAGA,IAClBqC,EAAIpC,KAAK8B,EAAOU,SAEpBD,EAAYvC,KAAKoC,GAErB,OAAOG,EAGIE,M,4CCPAC,EAxIG,SAAC,GAA+D,IAA7D9B,EAA4D,EAA5DA,aAAcrB,EAA8C,EAA9CA,OAAQoD,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,cACpDC,EAAyBnE,IAAMC,OAAO,MACtCmE,EAAoBpE,IAAMC,OAAO,MACjCoE,EAAkBrE,IAAMC,OAAO,MAC/BqE,EAAiBtE,IAAMC,OAAO,MAwFpC,SAASsE,EAAuBC,GACxBL,EAAuB9D,UAAYmE,EAAIjD,QACvC4C,EAAuB9D,QAAQoE,aAAa,YAAY,GACxDL,EAAkB/D,QAAQqE,gBAAgB,YAC1CL,EAAgBhE,QAAQsE,MAAMC,QAAU,GACxCN,EAAejE,QAAQsE,MAAMC,QAAU,OAEvCP,EAAgBhE,QAAQwB,UAGxBuC,EAAkB/D,QAAQoE,aAAa,YAAY,GACnDN,EAAuB9D,QAAQqE,gBAAgB,YAC/CJ,EAAejE,QAAQsE,MAAMC,QAAU,GACvCP,EAAgBhE,QAAQsE,MAAMC,QAAU,QAnGhD5E,IAAMI,WAAU,WACZ+D,EAAuB9D,QAAUC,SAASC,eAAe,wCACzD4D,EAAuB9D,QAAQwE,iBAAiB,QAASN,GACzDH,EAAkB/D,QAAUC,SAASC,eAAe,kCACpD8D,EAAgBhE,QAAUC,SAASC,eAAe,qBAClD+D,EAAejE,QAAUC,SAASC,eAAe,oBACjD+D,EAAejE,QAAQsE,MAAMC,QAAU,SACxC,IAoGH,IAFA,IAAME,EAAY,GACZC,EAAW,GACR5D,EAAI,EAAGA,EAAI,GAAIA,IACpB2D,EAAUzD,KAAK,qBAAKZ,UAAU,0BAAf,SAA0CU,KACzD4D,EAAS1D,KAAK,qBAAKZ,UAAU,0BAAf,SAA2CU,KAG7D,OACI,sBAAKV,UAAW,aAAhB,UACI,sBAAKD,GAAG,qBAAR,UACI,wBAAQA,GAAG,uCAAuCwE,UAAQ,EAA1D,yBACA,wBAAQxE,GAAG,iCAAiCc,QAASiD,EAArD,sBAEJ,qBAAKU,SAAS,IAAI3D,QA7G1B,YAAmC,IAAXC,EAAU,EAAVA,OACpB,GAAKA,EAAOE,UAAUyD,SAAS,4BAC1BjD,EAAL,CACA,IAAMwB,EAAM0B,OAAOlD,EAAaN,aAAa,aACvCyD,EAAMD,OAAOlD,EAAaN,aAAa,aAEvC0D,EAA0BpD,EAAaH,SAAS,GAChDjC,EAAQ0B,EAAO+D,UACrB,GAAID,EAAwBC,UAAUC,SAAW1F,EAI7C,OAHAwF,EAAwBC,UAAY,GACpC1E,EAAO6C,GAAK2B,GAAO,SACnBpB,EAAUT,EAAW3C,IAIzByE,EAAwBC,UAAYzF,EACpCe,EAAO6C,GAAK2B,GAAOvF,EACnBmE,EAAUT,EAAW3C,MA4FwB4E,QAxFjD,SAAiBhB,GACb,GAAKvC,EAAL,CACA,IAAMwD,EAAMjB,EAAIiB,IAChB,GAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKC,SAASD,GAA5D,CAGA,IAAMhC,EAAM0B,OAAOlD,EAAaN,aAAa,aACvCyD,EAAMD,OAAOlD,EAAaN,aAAa,aACvC0D,EAA0BpD,EAAaH,SAAS,GACtD,GAAIuD,EAAwBC,UAAUC,SAAWE,EAK7C,OAJAJ,EAAwBC,UAAY,GACpC1E,EAAO6C,GAAK2B,GAAO,IACnBpB,EAAUT,EAAW3C,SACrBsD,EAAcX,EAAW3C,IAG7ByE,EAAwBC,UAAYG,EACpC7E,EAAO6C,GAAK2B,GAAOK,EACnBzB,EAAUT,EAAW3C,IACrBsD,EAAcX,EAAW3C,OAqEsCJ,GAAG,oBAAoBC,UAAU,oBAA5F,SACKqE,IAEL,qBAAKxD,QArEb,YAAkC,IAAXC,EAAU,EAAVA,OACnB,GAAKA,EAAOE,UAAUyD,SAAS,4BAC1BjD,EAAL,CAEA,IAAM0D,EAA0B1D,EAAaH,SAAS,GAChD8D,EAAYrE,EAAO+D,UAAUC,OAC/BM,EAAiBF,EAAwBhE,aAAa,cAC1D,IAAKkE,EAID,OAHAF,EAAwBlB,aAAa,aAAcmB,GACnDD,EAAwBL,UAAYM,OACpC3B,EAAO6B,KAAKC,UAKhB,IADA,IAAIC,GADJH,EAAiBA,EAAelC,MAAM,MACI3B,OACjCb,EAAI,EAAGA,EAAI6E,EAAsB7E,IACtC,GAAI0E,EAAe1E,KAAOyE,EAMtB,OALAC,EAAeI,OAAO9E,EAAG,GACzB0E,EAAeK,OACfP,EAAwBL,UAAYO,EAAevC,KAAK,KACxDqC,EAAwBlB,aAAa,aAAcoB,EAAevC,KAAK,WACvEW,EAAO6B,KAAKC,UAIpBF,EAAexE,KAAKuE,GACpBC,EAAeK,OACfP,EAAwBL,UAAYO,EAAevC,KAAK,KACxDqC,EAAwBlB,aAAa,aAAcoB,EAAevC,KAAK,MACvEW,EAAO6B,KAAKC,YAwCmBtF,UAAU,mBAAmBD,GAAG,mBAA3D,SACKuE,QCnHFoB,G,MAdO,SAAC,GAAkB,IAAjBlE,EAAgB,EAAhBA,aACpB,OACI,sBAAKxB,UAAU,iBAAiBD,GAAG,iBAAnC,UACI,qBAAKC,UAAU,4BAAf,SACKwB,EAAaH,SAAS,GAAGwD,YAE9B,qBAAK7E,UAAU,4BAAf,SACKwB,EAAaH,SAAS,GAAGwD,iBC8D3Bc,G,YArEC,SAAC,GAAkF,IAAhFzF,EAA+E,EAA/EA,gBAAiBK,EAA8D,EAA9DA,YAAaiB,EAAiD,EAAjDA,aAAclB,EAAmC,EAAnCA,SAAUH,EAAyB,EAAzBA,OACrE,GAD8F,EAAjByF,WACvCC,mBAAS,OAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkCF,mBAAS,MAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAF8F,4CAI9F,WAAuBlC,GAAvB,6BAAAnC,EAAA,6DACUgB,EAAaD,EAAcxC,GAC3B0B,EAAM,kEAAoEe,EAFpF,SAGiDd,MAAMD,GAC9CE,MAAK,SAAAC,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAM,iBAAkBF,EAAKG,QAE3C,OAAOH,EAAKI,UAEfL,MAAK,SAAAM,GACF,OAAOA,EAAKA,QAEfC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAbpC,mBAGY2D,EAHZ,EAGYA,SAAU9G,EAHtB,EAGsBA,MAAO+G,EAH7B,EAG6BA,UAYnBC,EAAS,iBAAmBF,EAAS,GAAK,GAAK,KAAOA,EAAS,GAAK,GACpEG,EAAOxG,SAASsB,cAAciF,IAEhC9F,EAlBR,wBAmBQA,EAASU,UAAUC,OAAO,YAC1BV,EAAY,MApBpB,2BAwBI8F,EAAKrF,UAAUU,IAAI,YACnBnB,EAAY8F,GACR7E,GACAA,EAAaR,UAAUC,OAAO,iBAElCf,EAAgBmG,GAEhBxG,SAASsB,cAAc,sBAAsBC,QAG7C2E,EADc,qCAAuCI,GAErDF,EAAa7G,GAnCjB,6CAJ8F,sBA+C9F,OACI,gCACI,wBAAQyB,QAjD8E,4CAiD5Dd,GAAG,cAA7B,kBACA,sBAAKC,UAAU,eAAf,UACMM,EAAYwF,EAAc,GAC1BxF,EAAY,wBAAQO,QAVlC,SAAsBkD,GACDlE,SAASsB,cAAc,aAC/B0D,UAAYmB,GAQgChG,UAAU,kBAAzC,0BAAmF,GAC/FM,EAAY,qBAAKP,GAAG,aAAoB,WCkG3CuG,EAnJK,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,WAAY9C,EAA0C,EAA1CA,cAAe+C,EAA2B,EAA3BA,qBAC9C,EAAwCjH,IAAMsG,SAAS,MAAvD,mBAAOrE,EAAP,KAAqBtB,EAArB,KACA,EAAsCX,IAAMsG,SAAS,MAArD,mBAAOxF,EAAP,KAAoBoG,EAApB,KACA,EAA0BlH,IAAMsG,UAAS,GAAzC,mBAAOa,EAAP,KAAcC,EAAd,KACMC,EAAiBrH,IAAMC,OAAO,MACpC,EAA4BD,IAAMsG,SAAS,MAA3C,mBAAO1F,EAAP,KAAeoD,EAAf,KACA,EAAgChE,IAAMsG,SAAS,MAA/C,mBAAOvF,EAAP,KAAiBC,EAAjB,KACA,EAA0BhB,IAAMsG,SAAS,MAAzC,mBAAcgB,GAAd,WACA,EAAgCtH,IAAMsG,SAAS,MAA/C,mBAAiBiB,GAAjB,WAGA,EAAoBvH,IAAMsG,SAAS,MAAnC,mBAAUrC,GAAV,WAEA,GAAIrD,EAAQ,CACR,IAAM4G,EJ2Bd,SAAsB5G,GAElB,IAAK,IAAIO,EAAI,EAAGA,EAAI,EAAGA,IAenB,GAdUP,EAAOO,GAGCsG,QAAO,SAACpF,EAAGqF,GACzB,MAAU,MAANA,IACArF,EAAEqF,GACFrF,EAAEsF,eAAgB,EAGlBtF,EAAEqF,GAAK,GALWrF,IAQvB,IAEOsF,cACN,OAAO,EAKf,IAAK,IAAIxG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAGxB,IADA,IAAIiE,EAAM,GACDhE,EAAI,EAAGA,EAAI,EAAGA,IACnBgE,EAAI/D,KAAKT,EAAOQ,GAAGD,IAevB,GAXciE,EAAIqC,QAAO,SAACpF,EAAGqF,GACzB,MAAU,MAANA,IACArF,EAAEqF,GACFrF,EAAEsF,eAAgB,EAGlBtF,EAAEqF,GAAK,GALWrF,IAQvB,IAEOsF,cACN,OAAO,EAIf,IAAK,IAAIxG,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAG3B,IADA,IAAIyG,EAAQ,CAAC,GAAI,GAAI,IACZxG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAIxB,IAJyB,IAAD,MAClByG,EAAO,GACPC,EAAO,GACPC,EAAO,GACJC,EAAI,EAAGA,EAAI,EAAGA,IACnBH,EAAKxG,KAAKT,EAAOQ,EAAID,GAAG6G,IACxBF,EAAKzG,KAAKT,EAAOQ,EAAID,GAAG6G,EAAI,IAC5BD,EAAK1G,KAAKT,EAAOQ,EAAID,GAAG6G,EAAI,KAGhC,EAAAJ,EAAM,IAAGvG,KAAT,QAAiBwG,IACjB,EAAAD,EAAM,IAAGvG,KAAT,QAAiByG,IACjB,EAAAF,EAAM,IAAGvG,KAAT,QAAiB0G,GAErB,cAAgBH,EAAhB,eAcI,GAdQ,KAGUH,QAAO,SAACpF,EAAGqF,GACzB,MAAU,MAANA,IACArF,EAAEqF,GACFrF,EAAEsF,eAAgB,EAGlBtF,EAAEqF,GAAK,GALWrF,IAQvB,IAEOsF,cACN,OAAO,EAInB,OAAO,EI9GmBM,CAAarH,GAC/BuG,IAAUK,GACVvF,EAAaR,UAAUU,IAAI,gBAC3BiF,GAAS,GACTF,EAAejF,KAETkF,GAASK,IACf1G,EAAYW,UAAUC,OAAO,gBAC7B0F,GAAS,GACTF,EAAe,OJS3B,SAAqBtG,GACjB,IAAK,IAAIO,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAqB,MAAjBR,EAAOO,GAAGC,GAAY,OAAO,EAGzC,OAAO,EIZC8G,CAAYtH,IAAWuG,GACvBgB,MAAM,YAId,SAAS9B,IAKL,IAHA,IACIvE,EADYxB,SAASsB,cAAc,aAChBE,SACnBsG,EAAatG,EAASE,OACjBb,EAAI,EAAGA,EAAIiH,EAAYjH,IAAK,CACjC,IAAM2F,EAAOhF,EAASX,GACtB2F,EAAKhF,SAAS,GAAGwD,UAAY,GAC7BwB,EAAKhF,SAAS,GAAGwD,UAAY,GAI7BrD,IACAA,EAAaR,UAAUC,OAAO,iBAC9Bf,EAAgB,OAIhBI,IACAA,EAASU,UAAUC,OAAO,YAC1BV,EAAY,OAIhB,IAAMqH,EAAgB/H,SAASC,eAAe,kBAC1C8H,IACAA,EAAcvG,SAAS,GAAGwD,UAAY,GACtC+C,EAAcvG,SAAS,GAAGwD,UAAY,IA1D2B,4CAgEzE,WAA4Bd,GAA5B,mBAAAnC,EAAA,6DACQD,EAAQoC,EAAIjD,OAAO1B,MAD3B,SAGuBiE,EAAU1B,GAHjC,OAGUU,EAHV,OAIUK,EAASL,EAAKK,OACpBkE,EAAehH,QAAU8C,EAEzBkD,IACArC,EAAUT,EAAWJ,IACrBoE,EAAYzE,EAAKwF,UACjBhB,EAASlF,GACL8B,GACAA,EAAc,CAAEf,OAAQI,EAAWJ,GAASf,QAAOkG,SAAUxF,EAAKwF,WAEnErB,GACCA,GAAqB,GAf7B,6CAhEyE,sBA+GzE,OA3BAjH,IAAMI,WAAU,WAAM,4CAClB,kCAAAiC,EAAA,yDACQc,EAAS,KACTf,EAAQ,KACRkG,EAAW,KACVtB,EAJT,wBAKQ5E,EAAQ,MALhB,SAM2B0B,EAAU1B,GANrC,OAMcU,EANd,OAOQwF,EAAWxF,EAAKwF,SAChBnF,EAASL,EAAKK,OARtB,wBAWQf,EAAQ4E,EAAW5E,MACnBe,EAAS6D,EAAW7D,OACpBmF,EAAWtB,EAAWsB,SAb9B,QAeIjB,EAAehH,QAAU8C,EACzBa,EAAUT,EAAWJ,IACrBoE,EAAYe,GACZhB,EAASlF,GACL8B,GACAA,EAAc,CAAEf,OAAQI,EAAWJ,GAASf,QAAOkG,aApB3D,6CADkB,uBAAC,WAAD,wBAwBlBC,KACD,IAEE3H,EAGD,sBAAKH,UAAU,eAAf,UAEI,qBAAKA,UAAU,2BAAf,SACI,cAAC,EAAD,CAAYO,YAAaA,EAAaD,SAAUA,EAAUJ,gBAAiBA,EAAiBG,YAAaA,EAAaF,OAAQA,EAAQC,eAAgBwG,EAAehH,YAEzK,sBAAKI,UAAU,sBAAf,UACI,uBAAO+H,IAAI,sBAAX,0BACA,yBAAQhI,GAAG,sBAAsBC,UAAU,sBAAsBgI,SAzHJ,4CAyH7D,UACI,wBAAQ5I,MAAM,MAAd,uBACA,wBAAQA,MAAM,MAAd,uBACA,wBAAQA,MAAM,QAAd,yBACA,wBAAQA,MAAM,OAAd,wBACA,wBAAQA,MAAM,OAAd,8BAGR,qBAAKY,UAAU,WAAf,SACI,cAAC,EAAD,CAASG,OAAQA,EAAQqB,aAAcA,EAAclB,SAAUA,EAAUC,YAAaA,EAAaL,gBAAiBA,EAAiB0F,WAAYA,MAEpJpE,EAAe,qBAAKxB,UAAU,8BAAf,SAA6C,cAAC,EAAD,CAAewB,aAAcA,MAAyB,KACnH,qBAAKxB,UAAU,eAEf,qBAAKA,UAAU,0BAAf,SACI,cAAC,EAAD,CAAWwB,aAAcA,EAAciC,cAAeA,EAAeD,OAAQA,EAAQrD,OAAQA,EAAQoD,UAAWA,SAzBxG,ICoFT0E,G,MAtMA,SAAC,GAA2D,IAAzD1B,EAAwD,EAAxDA,WAAY2B,EAA4C,EAA5CA,oBAAqBC,EAAuB,EAAvBA,kBAC/C,EAAoC5I,IAAMsG,SAAS,CAAEuC,MAAO,GAAIC,SAAU,KAA1E,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0ChJ,IAAMsG,SAAS,CAAEuC,MAAO,GAAIC,SAAU,KAAhF,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA4ClJ,IAAMsG,UAAS,GAA3D,mBAAO6C,EAAP,KAAuBC,EAAvB,KAHsE,4CAKtE,WAA2B5E,GAA3B,qBAAAnC,EAAA,6DACImC,EAAI6E,iBAEAR,EAAQrE,EAAIjD,OAAOK,cAAc,uBACjCkH,EAAWtE,EAAIjD,OAAOK,cAAc,0BAE5B,6DACN0H,EAAM,CACRC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEb,SAAUA,EAASjJ,MAAOgJ,MAAOA,EAAMhJ,SAVtE,SAaqB0C,MAPL,6DAOgB+G,GACvB9G,MAAK,SAAAC,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAM,gBAAiBF,EAAKG,QAE1C,OAAOH,EAAKI,UAEfL,MAAK,SAAAM,GACF,OAAOA,KAEVC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAvBpC,QAaQP,EAbR,SAyBgBA,EAAKmH,SACbC,aAAaC,QAAQ,QAASrH,EAAKsH,OACnCF,aAAaC,QAAQ,KAAMrH,EAAKjC,IAChCqI,EAAMhJ,MAAQ,GACdiJ,EAASjJ,MAAQ,GACjBS,SAASC,eAAe,eAAe+E,UAAY,GACnD8D,GAAkB,IAGlB9I,SAASC,eAAe,eAAe+E,UAAY,sBAlC3D,4CALsE,sBA2CtE,SAAS0E,EAAYxF,GACjB,IAAM8E,EAAM,GACRT,EAAQrE,EAAIjD,OAAOC,cAAcI,cAAc,uBAC/CkH,EAAWtE,EAAIjD,OAAOC,cAAcI,cAAc,0BACtD0H,EAAIT,MAAQA,EAAMhJ,MAClByJ,EAAIR,SAAWA,EAASjJ,MACxBmJ,EAAcM,GAjDoD,4CAoDtE,WAA8B9E,GAA9B,qBAAAnC,EAAA,6DACImC,EAAI6E,iBAEAR,EAAQrE,EAAIjD,OAAOK,cAAc,uBACjCkH,EAAWtE,EAAIjD,OAAOK,cAAc,0BAE5B,mEACN0H,EAAM,CACRC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEb,SAAUA,EAASjJ,MAAOgJ,MAAOA,EAAMhJ,SAVtE,SAaqB0C,MAPL,mEAOgB+G,GACvB9G,MAAK,SAAAC,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAM,gBAAiBF,EAAKG,QAE1C,OAAOH,EAAKI,UAEfL,MAAK,SAAAM,GACF,OAAOA,KAEVC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAvBpC,QAaQP,EAbR,SAyBgBA,EAAKmH,SACbC,aAAaC,QAAQ,QAASrH,EAAKsH,OACnClB,EAAMhJ,MAAQ,GACdiJ,EAASjJ,MAAQ,GACjBS,SAASC,eAAe,kBAAkB+E,UAAY,GACtD8D,GAAkB,IAGlB9I,SAASC,eAAe,kBAAkB+E,UAAY,sBAjC9D,4CApDsE,sBAyFtE,SAAS2E,EAAezF,GACpB,IAAM8E,EAAM,GACRT,EAAQrE,EAAIjD,OAAOC,cAAcI,cAAc,uBAC/CkH,EAAWtE,EAAIjD,OAAOC,cAAcI,cAAc,0BACtD0H,EAAIT,MAAQA,EAAMhJ,MAClByJ,EAAIR,SAAWA,EAASjJ,MACxBqJ,EAAiBI,GA/FiD,4CAwGtE,WAA4B9E,GAA5B,yBAAAnC,EAAA,6DACUc,EAAS6D,EAAW7D,OACpBf,EAAQ4E,EAAW5E,MACnBkG,EAAWtB,EAAWsB,SACtByB,EAAQF,aAAaK,QAAQ,SAC7B1J,EAAKqJ,aAAaK,QAAQ,MACpB,wDACNZ,EAAM,CACRC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACxG,SAAQf,QAAOkG,WAAUyB,QAAOvJ,QAV9D,SAaqB+B,MAPL,wDAOgB+G,GACvB9G,MAAK,SAAAC,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAM,gBAAiBF,EAAKG,QAE1C,OAAOH,EAAKI,UAEfL,MAAK,SAAAM,GACF,OAAOA,KAEVC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAvBpC,2DAxGsE,kEAmItE,WAA8BwB,GAA9B,yBAAAnC,EAAA,6DACUc,EAAS6D,EAAW7D,OACpBf,EAAQ4E,EAAW5E,MACnBkG,EAAWtB,EAAWsB,SACtByB,EAAQF,aAAaK,QAAQ,SAC7B1J,EAAKqJ,aAAaK,QAAQ,MAEpB,wDACNZ,EAAM,CACRC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CAACxG,SAAQf,QAAOkG,WAAUyB,QAAOvJ,QAX9D,SAaqB+B,MANL,wDAMgB+G,GACvB9G,MAAK,SAAAC,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAM,gBAAiBF,EAAKG,QAE1C,OAAOH,EAAKI,UAEfL,MAAK,SAAAM,GACF,OAAOA,KAEVC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAvBpC,2DAnIsE,kEA8JtE,WAAkCwB,GAAlC,SAAAnC,EAAA,sDACIsG,GAAoB,SAAA9I,GAAK,OAAGA,KADhC,4CA9JsE,sBAkKtE,IAAMsK,EAAQ,qBAAK3J,GAAG,QAAR,SACV,uBAAM4J,SAnK4D,4CAmKlE,UACI,uBAAOC,KAAK,OAAOC,YAAY,QAAQ7B,SAAUuB,EAAanK,MAAOkJ,EAAWF,MAAO0B,KAAK,UAC5F,uBAAOF,KAAK,WAAWC,YAAY,WAAW7B,SAAUuB,EAAanK,MAAOkJ,EAAWD,SAAUyB,KAAK,aACtG,uBAAOF,KAAK,SAASxK,MAAM,WAC3B,sBAAMW,GAAG,cAAcC,UAAW,iBAIpC+J,EAAW,qBAAKhK,GAAG,WAAR,SACb,uBAAM4J,SA5K4D,4CA4KlE,UACI,uBAAOC,KAAK,OAAOC,YAAY,QAAQ7B,SAAUwB,EAAgBpK,MAAOoJ,EAAcJ,MAAO0B,KAAK,UAClG,uBAAOF,KAAK,WAAWC,YAAY,WAAW7B,SAAUwB,EAAgBpK,MAAOoJ,EAAcH,SAAUyB,KAAK,aAC5G,uBAAOF,KAAK,SAASxK,MAAM,aAC3B,sBAAMW,GAAG,iBAAiBC,UAAW,iBAIvCgK,EAAS,wBAAQnJ,QAlFvB,SAAkBkD,GACdqF,aAAaa,WAAW,SACxBb,aAAaa,WAAW,MACxBtB,GAAkB,IA+EP,qBACTuB,EAAa,wBAAQnK,GAAG,cAAcc,QArL0B,4CAqLnD,yBACbsJ,EAAmB,wBAAQpK,GAAG,qBAAqBc,QAtLa,4CAsL7C,gCACnBuJ,EAAe,wBAAQrK,GAAG,gBAAgBc,QAvLsB,4CAuLjD,2BACrB,OACI,gCACO6H,EAA0BsB,EAARN,EAClBhB,EAA6B,KAAXqB,EACnBrB,IAAmBP,EAAqB+B,EAAa,KACrDxB,GAAkBP,EAAqBiC,EAAe,KACtD1B,EAAkByB,EAAmB,UCjJpCE,EA/CM,SAAC,GAAgE,IAA/D5G,EAA8D,EAA9DA,cAAeyE,EAA+C,EAA/CA,oBAAqB1B,EAA0B,EAA1BA,qBACvD,EAAwCjH,IAAMsG,SAAS,IAAvD,mBAAOyE,EAAP,KAAqBC,EAArB,KADiF,SA0BlEC,EA1BkE,8EA0BjF,mCAAA5I,EAAA,sDAA6Bd,EAA7B,EAA6BA,OACnBa,EAAQb,EAAOI,aAAa,cAElCwB,EAASO,EADLP,EAAS5B,EAAOI,aAAa,gBAE3B2G,EAAW/G,EAAOI,aAAa,kBACrCuC,EAAc,CAAC9B,QAAOe,SAAQmF,aAC9BK,GAAoB,SAAAuC,GAAG,OAAGA,KAC1BjE,GAAqB,GAPzB,4CA1BiF,sBAKjFjH,IAAMI,WAAU,WAAM,4CAClB,kCAAAiC,EAAA,6DACU7B,EAAKqJ,aAAaK,QAAQ,MAC1BH,EAAQF,aAAaK,QAAQ,SAC7B5H,EAAM,yDAA2D9B,EAAK,UAAYuJ,EAH5F,SAKqBxH,MAAMD,GAClBE,MAAK,SAAAC,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAM,eAAgBF,EAAKG,QAEzC,OAAOH,EAAKI,UAEfL,MAAK,SAAAM,GAAI,OAAIA,KACbC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAbpC,OAKQP,EALR,OAcIuI,EAAgBvI,EAAK0I,SAdzB,4CADkB,uBAAC,WAAD,wBAiBlBC,KACD,CAACL,IAaJ,IAAMM,EAAaN,EAAaO,KAAI,SAAAnI,GAChC,OAAO,qBAAI7B,QAAS2J,EAAc,aAAY9H,EAAOf,MAAO,cAAae,EAAOA,OAAQ,iBAAgBA,EAAOoI,UAAxG,0BAAiIpI,EAAOf,YAGnJ,OAAQ,sBAAK5B,GAAG,gBAAR,UACJ,+CACEuK,EAAgB,6BAAKM,IAAmB,qDC5BnCG,MAXf,WACE,MAAoCxL,IAAMsG,SAAS,MAAnD,mBAAOU,EAAP,KAAmB9C,EAAnB,KACA,EAAgDlE,IAAMsG,UAAS,GAA/D,mBAAOsE,EAAP,KAAyBjC,EAAzB,KACA,EAAkD3I,IAAMsG,UAAS,GAAjE,mBAAOsC,EAAP,KAA0B3B,EAA1B,KAEA,OAAQ,qCACE,cAAC,EAAD,CAAQ2B,kBAAmBA,EAAmB5B,WAAYA,EAAY2B,oBAAqBA,IACxFiC,EAAyI,cAAC,EAAD,CAAc3D,qBAAsBA,EAAsB/C,cAAeA,EAAeyE,oBAAqBA,IAAjO,cAAC,EAAD,CAAa1B,qBAAsBA,EAAsB/C,cAAeA,EAAe8C,WAAYA,QCDxHyE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnJ,MAAK,YAAkD,IAA/CoJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7L,SAASC,eAAe,SAM1BkL,M","file":"static/js/main.87dd33d0.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './SudokuCell.css';\r\n\r\n\r\nconst SudokuCell = ({cellRow, cellCol, value=5, given})=>{\r\n    let outerCell = React.useRef(null);\r\n    const notGiven = !given;\r\n    const upperCellClasses = (given) ? 'upper-cell given' : 'upper-cell';     \r\n\r\n    React.useEffect(()=>{\r\n        outerCell.current = document.getElementById('sudoku-cell-' + cellRow + '-' + cellCol);\r\n    }, []); \r\n\r\n    return (<>\r\n                        <div id={'sudoku-cell-' + cellRow + '-' + cellCol} data-row={cellRow} data-col={cellCol} className='outer-cell' data-not-given={notGiven}>\r\n                            <div className={upperCellClasses}>{(notGiven) ? '' : value}</div>\r\n                            <div className='lower-cell' data-notes=''></div>\r\n                        </div>\r\n                    \r\n            </>);\r\n}; \r\n\r\n\r\n\r\nexport default SudokuCell;","import React from \"react\";\r\nimport SudokuCell from \"../SudokuCell/SudokuCell\";\r\nimport './SudokuGrid.css';\r\n\r\n\r\nconst SudokuGrid = ({ setSelectedCell, sudoku, originalSudoku, invalidCell, hintCell, setHintCell }) => {\r\n    const gridDiv = React.useRef(null);\r\n\r\n\r\n    function onClick({ target }) {\r\n        if (target !== gridDiv) {\r\n            target = target.parentElement;\r\n            if(hintCell && hintCell !== target){\r\n                    hintCell.classList.remove('hintCell'); \r\n                    setHintCell(null);\r\n            }\r\n\r\n            if (target.getAttribute('data-not-given') === 'false') return;\r\n\r\n            if (invalidCell && target !== invalidCell) {\r\n                document.querySelector('.sudoku-pad-values').focus();\r\n                return;\r\n            }\r\n\r\n            const children = gridDiv.current.children;\r\n            const childrenLength = children.length;\r\n            let selectedCell = null;\r\n            for (let i = 0; i < childrenLength; i++) {\r\n                const child = children[i];\r\n                if (child === target) {\r\n                    child.classList.add('selected-cell');\r\n                    selectedCell = child;\r\n                }\r\n                else {\r\n                    child.classList.remove('selected-cell');\r\n                }\r\n\r\n            }\r\n            setSelectedCell(selectedCell);\r\n            document.querySelector('.sudoku-pad-values').focus();\r\n        }\r\n    }\r\n\r\n\r\n    const gridArray = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            let given = (originalSudoku[i][j] !== '0') ? true : false;\r\n            gridArray.push(<SudokuCell cellRow={i} cellCol={j} value={sudoku[i][j]} given={given} />);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        gridDiv.current = document.getElementById('grid-div');\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div id='outer-grid-div'>\r\n            <div className='grid-hor-bar' id='grid-first-hor-bar'></div>\r\n            <div className='grid-hor-bar' id='grid-second-hor-bar'></div>\r\n            <div className='grid-ver-bar' id='grid-first-ver-bar'></div>\r\n            <div className='grid-ver-bar' id='grid-second-ver-bar'></div>\r\n            <div className='grid-div' id='grid-div' onClick={onClick}>\r\n                {gridArray}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SudokuGrid;","\r\n\r\nasync function getPuzzle(level) {\r\n    const url = 'https://steven-sudoku-api.herokuapp.com/sudoku?level=' + level;\r\n    const puzzle = await fetch(url)\r\n        .then(resp => {\r\n            if (!resp.ok) {\r\n                throw new Error(\"Error! Status:\", resp.status);\r\n            }\r\n            return resp.json();\r\n        })\r\n        .then(data => {\r\n            return data.data;\r\n        })\r\n        .catch(err => console.error(err));\r\n\r\n    return puzzle;\r\n}\r\n\r\nfunction flattenPuzzle(puzzle){\r\n    let flatPuzzle = [];\r\n    for(let i = 0; i < 9; i++){\r\n        flatPuzzle.push(...puzzle[i]);\r\n    }\r\n\r\n    return flatPuzzle.join(',');\r\n}\r\n\r\nfunction copySudoku(sudoku) {\r\n    const copy = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < 9; j++) {\r\n            row.push(sudoku[i][j]);\r\n        }\r\n        copy.push(row);\r\n    }\r\n    return copy;\r\n}\r\n\r\nfunction isBoardFull(sudoku) {\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            if (sudoku[i][j] === '0') return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction isBoardValid(sudoku) {\r\n    // check by rows\r\n    for (let i = 0; i < 9; i++) {\r\n        let row = sudoku[i];\r\n\r\n        // test if any duplicates occur\r\n        const count = row.reduce((a, b) => {\r\n            if (b === '0') return a;\r\n            if (a[b]) {\r\n                a.areDuplicates = true;\r\n            }\r\n            else {\r\n                a[b] = 1;\r\n            }\r\n            return a;\r\n        }, {});\r\n\r\n        if (count.areDuplicates) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n        // get columns\r\n        let col = [];\r\n        for (let j = 0; j < 9; j++) {\r\n            col.push(sudoku[j][i]);\r\n        }\r\n\r\n        // test if any duplicates occur\r\n        const count = col.reduce((a, b) => {\r\n            if (b === '0') return a;\r\n            if (a[b]) {\r\n                a.areDuplicates = true;\r\n            }\r\n            else {\r\n                a[b] = 1;\r\n            }\r\n            return a;\r\n        }, {});\r\n\r\n        if (count.areDuplicates) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 9; i += 3) {\r\n        // get boxes\r\n        let boxes = [[], [], []];\r\n        for (let j = 0; j < 3; j++) {\r\n            const rowA = [];\r\n            const rowB = [];\r\n            const rowC = [];\r\n            for (let k = 0; k < 3; k++) {\r\n                rowA.push(sudoku[j + i][k]);\r\n                rowB.push(sudoku[j + i][k + 3]);\r\n                rowC.push(sudoku[j + i][k + 6]);\r\n\r\n            }\r\n            boxes[0].push(...rowA);\r\n            boxes[1].push(...rowB);\r\n            boxes[2].push(...rowC);\r\n        }\r\n        for (let box of boxes) {\r\n            //test if any duplicates occur \r\n            // test if any duplicates occur\r\n            const count = box.reduce((a, b) => {\r\n                if (b === '0') return a;\r\n                if (a[b]) {\r\n                    a.areDuplicates = true;\r\n                }\r\n                else {\r\n                    a[b] = 1;\r\n                }\r\n                return a;\r\n            }, {});\r\n\r\n            if (count.areDuplicates) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction convertTo2DArray(puzzle){\r\n    puzzle = puzzle.split(',');\r\n    let puzzleArray = [];\r\n    for(let i = 0; i < 9; i++){\r\n        let row = [];\r\n        for(let j = 0; j < 9; j++){\r\n            row.push(puzzle.shift()); \r\n        }\r\n        puzzleArray.push(row);\r\n    }\r\n    return puzzleArray; \r\n}\r\n\r\nexport default getPuzzle;\r\nexport { copySudoku, isBoardFull, isBoardValid, flattenPuzzle, convertTo2DArray };","import React from \"react\";\r\nimport './SudokuPad.css';\r\nimport { copySudoku } from '../helpers';\r\n\r\n\r\nconst SudokuPad = ({ selectedCell, sudoku, setSudoku, update, setPuzzleInfo}) => {\r\n    const cellValuesToggleButton = React.useRef(null);\r\n    const notesToggleButton = React.useRef(null);\r\n    const sudokuPadValues = React.useRef(null);\r\n    const sudokuPadNotes = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        cellValuesToggleButton.current = document.getElementById('sudoku-pad-cell-values-toggle-button');\r\n        cellValuesToggleButton.current.addEventListener('click', onClickSudokuPadToggle);\r\n        notesToggleButton.current = document.getElementById('sudoku-pad-notes-toggle-button');\r\n        sudokuPadValues.current = document.getElementById('sudoku-pad-values');\r\n        sudokuPadNotes.current = document.getElementById('sudoku-pad-notes');\r\n        sudokuPadNotes.current.style.display = 'none';\r\n    }, [])\r\n\r\n    function onClickValue({ target }) {\r\n        if (!target.classList.contains('sudoku-pad-digit-button')) return;\r\n        if (!selectedCell) return;\r\n        const row = Number(selectedCell.getAttribute('data-row'));\r\n        const col = Number(selectedCell.getAttribute('data-col'));\r\n\r\n        const upperCellOfSelectedCell = selectedCell.children[0];\r\n        const value = target.innerText;\r\n        if (upperCellOfSelectedCell.innerText.trim() === value) {\r\n            upperCellOfSelectedCell.innerText = '';\r\n            sudoku[row][col] = '0';\r\n            setSudoku(copySudoku(sudoku));\r\n            return;\r\n        }\r\n\r\n        upperCellOfSelectedCell.innerText = value;\r\n        sudoku[row][col] = value;\r\n        setSudoku(copySudoku(sudoku));\r\n    }\r\n\r\n\r\n    function onKeyUp(evt) {\r\n        if (!selectedCell) return;\r\n        const key = evt.key;\r\n        if (!['1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(key)) {\r\n            return;\r\n        }\r\n        const row = Number(selectedCell.getAttribute('data-row'));\r\n        const col = Number(selectedCell.getAttribute('data-col'));\r\n        const upperCellOfSelectedCell = selectedCell.children[0];\r\n        if (upperCellOfSelectedCell.innerText.trim() === key) {\r\n            upperCellOfSelectedCell.innerText = '';\r\n            sudoku[row][col] = '0';\r\n            setSudoku(copySudoku(sudoku));\r\n            setPuzzleInfo(copySudoku(sudoku));\r\n            return;\r\n        }\r\n        upperCellOfSelectedCell.innerText = key;\r\n        sudoku[row][col] = key;\r\n        setSudoku(copySudoku(sudoku));\r\n        setPuzzleInfo(copySudoku(sudoku));\r\n    }\r\n\r\n    function onClickNote({ target }) {\r\n        if (!target.classList.contains('sudoku-pad-digit-button')) return;\r\n        if (!selectedCell) return;\r\n\r\n        const lowerCellOfSelectedCell = selectedCell.children[1];\r\n        const noteValue = target.innerText.trim();\r\n        let lowerCellNotes = lowerCellOfSelectedCell.getAttribute('data-notes');\r\n        if (!lowerCellNotes) {\r\n            lowerCellOfSelectedCell.setAttribute('data-notes', noteValue);\r\n            lowerCellOfSelectedCell.innerText = noteValue;\r\n            update(Math.random());\r\n            return;\r\n        }\r\n        lowerCellNotes = lowerCellNotes.split(',');\r\n        let lowerCellNotesLength = lowerCellNotes.length;\r\n        for (let i = 0; i < lowerCellNotesLength; i++) {\r\n            if (lowerCellNotes[i] === noteValue) {\r\n                lowerCellNotes.splice(i, 1);\r\n                lowerCellNotes.sort();\r\n                lowerCellOfSelectedCell.innerText = lowerCellNotes.join(' ');\r\n                lowerCellOfSelectedCell.setAttribute('data-notes', lowerCellNotes.join(','));\r\n                update(Math.random());\r\n                return;\r\n            }\r\n        }\r\n        lowerCellNotes.push(noteValue);\r\n        lowerCellNotes.sort();\r\n        lowerCellOfSelectedCell.innerText = lowerCellNotes.join(' ');\r\n        lowerCellOfSelectedCell.setAttribute('data-notes', lowerCellNotes.join(','));\r\n        update(Math.random());\r\n    }\r\n\r\n\r\n\r\n    function onClickSudokuPadToggle(evt) {\r\n        if (cellValuesToggleButton.current === evt.target) {\r\n            cellValuesToggleButton.current.setAttribute('disabled', true);\r\n            notesToggleButton.current.removeAttribute('disabled');\r\n            sudokuPadValues.current.style.display = '';\r\n            sudokuPadNotes.current.style.display = 'none';\r\n\r\n            sudokuPadValues.current.focus();\r\n        }\r\n        else {\r\n            notesToggleButton.current.setAttribute('disabled', true);\r\n            cellValuesToggleButton.current.removeAttribute('disabled');\r\n            sudokuPadNotes.current.style.display = '';\r\n            sudokuPadValues.current.style.display = 'none';\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const valueDivs = [];\r\n    const noteDivs = [];\r\n    for (let i = 1; i < 10; i++) {\r\n        valueDivs.push(<div className='sudoku-pad-digit-button'>{i}</div>);\r\n        noteDivs.push(<div className='sudoku-pad-digit-button' >{i}</div>);\r\n    }\r\n\r\n    return (\r\n        <div className={'sudoku-pad'}>\r\n            <div id='sudoku-pad-buttons'>\r\n                <button id='sudoku-pad-cell-values-toggle-button' disabled>Cell Values</button>\r\n                <button id=\"sudoku-pad-notes-toggle-button\" onClick={onClickSudokuPadToggle} >Notes</button>\r\n            </div>\r\n            <div tabindex='0' onClick={onClickValue} onKeyUp={onKeyUp} id='sudoku-pad-values' className='sudoku-pad-values'>\r\n                {valueDivs}\r\n            </div>\r\n            <div onClick={onClickNote} className='sudoku-pad-notes' id='sudoku-pad-notes'>\r\n                {noteDivs}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SudokuPad;","import React from 'react';\r\nimport './MagnifiedCell.css'; \r\n\r\n\r\nconst MagnifiedCell = ({selectedCell})=>{\r\n    return (\r\n        <div className='magnified-cell' id='magnified-cell'>\r\n            <div className='magnified-cell-upper-cell'>\r\n                {selectedCell.children[0].innerText}\r\n            </div>\r\n            <div className='magnified-cell-lower-cell'>\r\n                {selectedCell.children[1].innerText}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default MagnifiedCell; ","import React, { useState } from \"react\";\r\nimport { flattenPuzzle } from \"../helpers\";\r\nimport './HintBox.css';\r\n\r\nconst HintBox = ({ setSelectedCell, setHintCell, selectedCell, hintCell, sudoku, resetBoard }) => {\r\n    const [hintMessage, setHintMessage] = useState(null);\r\n    const [hintValue, setHintValue] = useState(null);\r\n    \r\n    async function getHint(evt) {\r\n        const flatPuzzle = flattenPuzzle(sudoku);\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/sudoku/analysis?puzzle=' + flatPuzzle;\r\n        const { position, value, solveWith } = await fetch(url)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error! Status:', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data.data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n        const cellId = '#sudoku-cell-' + (position[0] - 1) + '-' + (position[1] - 1);\r\n        const cell = document.querySelector(cellId);\r\n\r\n        if (hintCell) {\r\n            hintCell.classList.remove('hintCell');\r\n            setHintCell(null);\r\n            return;\r\n        }\r\n\r\n        cell.classList.add('hintCell');\r\n        setHintCell(cell);\r\n        if (selectedCell) {\r\n            selectedCell.classList.remove('selected-cell');\r\n        }\r\n        setSelectedCell(cell);\r\n\r\n        document.querySelector('#sudoku-pad-values').focus();\r\n        \r\n        let message = 'The green cell can be solved with ' + solveWith; \r\n        setHintMessage(message);\r\n        setHintValue(value);\r\n    }\r\n\r\n    function viewSolution(evt){\r\n        const solution = document.querySelector('#solution');   \r\n        solution.innerText = hintValue;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={getHint} id='hint-button'>Hint</button>\r\n            <div className='hint-message'>\r\n                {(hintCell) ? hintMessage : ''}\r\n                {(hintCell) ? <button onClick={viewSolution} className='solution-button'>See Solution</button> : ''}\r\n                {(hintCell) ? <div id='solution'></div> : ''}\r\n            </div>\r\n        </div>\r\n        );\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default HintBox;","import React from \"react\";\r\nimport SudokuGrid from \"../SudokuGrid/SudokuGrid\";\r\nimport SudokuPad from \"../SudokuPad/SudokuPad\";\r\nimport MagnifiedCell from \"../MagnifiedCell/MagnifiedCell\";\r\nimport getPuzzle, { copySudoku, isBoardFull, isBoardValid, flattenPuzzle } from \"../helpers\";\r\nimport './SudokuBoard.css';\r\nimport HintBox from \"../HintBox/HintBox\";\r\n\r\nconst SudokuBoard = ({ puzzleInfo, setPuzzleInfo, setIsSavedPuzzleUsed }) => {\r\n    const [selectedCell, setSelectedCell] = React.useState(null);\r\n    const [invalidCell, setInvalidCell] = React.useState(null);\r\n    const [valid, setValid] = React.useState(true);\r\n    const orignialSudoku = React.useRef(null);\r\n    const [sudoku, setSudoku] = React.useState(null);\r\n    const [hintCell, setHintCell] = React.useState(null);\r\n    const [level, setLevel] = React.useState(null);\r\n    const [puzzleId, setPuzzleId] = React.useState(null);\r\n\r\n    // for updating entire board from within child\r\n    const [_, update] = React.useState(null);\r\n\r\n    if (sudoku) {\r\n        const testIfInvalid = isBoardValid(sudoku);\r\n        if (valid && !testIfInvalid) {\r\n            selectedCell.classList.add('invalid-cell');\r\n            setValid(false);\r\n            setInvalidCell(selectedCell);\r\n        }\r\n        else if (!valid && testIfInvalid) {\r\n            invalidCell.classList.remove('invalid-cell');\r\n            setValid(true);\r\n            setInvalidCell(null);\r\n        }\r\n\r\n        if (isBoardFull(sudoku) && valid) {\r\n            alert('you win!');\r\n        }\r\n    }\r\n\r\n    function resetBoard() {\r\n        // reset grid\r\n        const gridDiv = document.querySelector('#grid-div');\r\n        let children = gridDiv.children;\r\n        let cellLength = children.length;\r\n        for (let i = 0; i < cellLength; i++) {\r\n            const cell = children[i];\r\n            cell.children[0].innerText = '';\r\n            cell.children[1].innerText = '';\r\n        }\r\n\r\n        // reset selectedCell\r\n        if (selectedCell) {\r\n            selectedCell.classList.remove('selected-cell');\r\n            setSelectedCell(null);\r\n        }\r\n\r\n        // reset hintCell \r\n        if (hintCell) {\r\n            hintCell.classList.remove('hintCell');\r\n            setHintCell(null);\r\n        }\r\n\r\n        // reset magnified cell\r\n        const magnifiedCell = document.getElementById('magnified-cell');\r\n        if (magnifiedCell) {\r\n            magnifiedCell.children[0].innerText = '';\r\n            magnifiedCell.children[1].innerText = '';\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async function selectPuzzle(evt) {\r\n        let level = evt.target.value;\r\n\r\n        const data = await getPuzzle(level);\r\n        const puzzle = data.puzzle;\r\n        orignialSudoku.current = puzzle;\r\n\r\n        resetBoard();\r\n        setSudoku(copySudoku(puzzle));\r\n        setPuzzleId(data.puzzleId);\r\n        setLevel(level);\r\n        if (setPuzzleInfo) {\r\n            setPuzzleInfo({ puzzle: copySudoku(puzzle), level, puzzleId: data.puzzleId });\r\n        }\r\n        if(setIsSavedPuzzleUsed){\r\n            setIsSavedPuzzleUsed(false);\r\n        }\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        async function loadPuzzle() {\r\n            let puzzle = null;\r\n            let level = null;\r\n            let puzzleId = null;\r\n            if (!puzzleInfo) {\r\n                level = 'one';\r\n                const data = await getPuzzle(level);\r\n                puzzleId = data.puzzleId;\r\n                puzzle = data.puzzle;\r\n            }\r\n            else {\r\n                level = puzzleInfo.level; \r\n                puzzle = puzzleInfo.puzzle; \r\n                puzzleId = puzzleInfo.puzzleId;\r\n            }\r\n            orignialSudoku.current = puzzle;\r\n            setSudoku(copySudoku(puzzle));\r\n            setPuzzleId(puzzleId);\r\n            setLevel(level);\r\n            if (setPuzzleInfo) {\r\n                setPuzzleInfo({ puzzle: copySudoku(puzzle), level, puzzleId});\r\n            }\r\n        }\r\n        loadPuzzle();\r\n    }, []);\r\n\r\n    if (!sudoku) return '';\r\n\r\n    return (\r\n        <div className='sudoku-board'>\r\n\r\n            <div className='sudoku-board-sudoku-grid'>\r\n                <SudokuGrid setHintCell={setHintCell} hintCell={hintCell} setSelectedCell={setSelectedCell} invalidCell={invalidCell} sudoku={sudoku} originalSudoku={orignialSudoku.current} />\r\n            </div>\r\n            <div className='difficulty-selector'>\r\n                <label for='difficulty-selector'>Difficulty: </label>\r\n                <select id='difficulty-selector' className='sudoku-board-select' onChange={selectPuzzle}>\r\n                    <option value='one'>Level One</option>\r\n                    <option value='two'>Level Two</option>\r\n                    <option value='three'>Level Three</option>\r\n                    <option value='four'>Level Four</option>\r\n                    <option value='five'>Level Five</option>\r\n                </select>\r\n            </div>\r\n            <div className='hint-box'>\r\n                <HintBox sudoku={sudoku} selectedCell={selectedCell} hintCell={hintCell} setHintCell={setHintCell} setSelectedCell={setSelectedCell} resetBoard={resetBoard} />\r\n            </div>\r\n            {selectedCell ? <div className='sudoku-board-magnified-cell'><MagnifiedCell selectedCell={selectedCell} /></div> : null}\r\n            <div className='clearFloat'></div>\r\n\r\n            <div className='sudoku-board-sudoku-pad'>\r\n                <SudokuPad selectedCell={selectedCell} setPuzzleInfo={setPuzzleInfo} update={update} sudoku={sudoku} setSudoku={setSudoku} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport default SudokuBoard;","import React from \"react\";\r\nimport { flattenPuzzle } from \"../helpers\";\r\nimport './NavBar.css';\r\n\r\n\r\nconst NavBar = ({ puzzleInfo, setViewSavedPuzzles, isSavedPuzzleUsed}) => {\r\n    const [loginState, setLoginState] = React.useState({ email: '', password: '' });\r\n    const [registerState, setRegisterState] = React.useState({ email: '', password: '' });\r\n    const [loggedInStatus, setLoggedInStatus] = React.useState(false);\r\n\r\n    async function submitLogin(evt) {\r\n        evt.preventDefault();\r\n\r\n        let email = evt.target.querySelector('input[name=\"email\"]');\r\n        let password = evt.target.querySelector('input[name=\"password\"]');\r\n\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/authenticate/login';\r\n        const obj = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'post',\r\n            body: JSON.stringify({ password: password.value, email: email.value })\r\n        };\r\n\r\n        let resp = await fetch(url, obj)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error: Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n        if (resp && resp.success) {\r\n            localStorage.setItem('token', resp.token);\r\n            localStorage.setItem('id', resp.id);\r\n            email.value = '';\r\n            password.value = '';\r\n            document.getElementById('login-error').innerText = '';\r\n            setLoggedInStatus(true);\r\n        }\r\n        else {\r\n            document.getElementById('login-error').innerText = 'Invalid credentials';\r\n        }\r\n    }\r\n\r\n    function updateLogin(evt) {\r\n        const obj = {};\r\n        let email = evt.target.parentElement.querySelector('input[name=\"email\"]');\r\n        let password = evt.target.parentElement.querySelector('input[name=\"password\"]');\r\n        obj.email = email.value;\r\n        obj.password = password.value;\r\n        setLoginState(obj);\r\n    }\r\n\r\n    async function submitRegister(evt) {\r\n        evt.preventDefault();\r\n\r\n        let email = evt.target.querySelector('input[name=\"email\"]');\r\n        let password = evt.target.querySelector('input[name=\"password\"]');\r\n\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/authenticate/create-user';\r\n        const obj = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'post',\r\n            body: JSON.stringify({ password: password.value, email: email.value })\r\n        };\r\n\r\n        let resp = await fetch(url, obj)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error: Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n        if (resp && resp.success) {\r\n            localStorage.setItem('token', resp.token);\r\n            email.value = '';\r\n            password.value = '';\r\n            document.getElementById('register-error').innerText = '';\r\n            setLoggedInStatus(true);\r\n        }\r\n        else {\r\n            document.getElementById('register-error').innerText = 'Invalid credentials';\r\n        }\r\n    }\r\n\r\n    function updateRegister(evt) {\r\n        const obj = {};\r\n        let email = evt.target.parentElement.querySelector('input[name=\"email\"]');\r\n        let password = evt.target.parentElement.querySelector('input[name=\"password\"]');\r\n        obj.email = email.value;\r\n        obj.password = password.value;\r\n        setRegisterState(obj);\r\n    }\r\n\r\n    function onLogOut(evt) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('id');\r\n        setLoggedInStatus(false);\r\n    }\r\n\r\n    async function onSavePuzzle(evt) {\r\n        const puzzle = puzzleInfo.puzzle; \r\n        const level = puzzleInfo.level; \r\n        const puzzleId = puzzleInfo.puzzleId; \r\n        const token = localStorage.getItem('token');\r\n        const id = localStorage.getItem('id');\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/saved-puzzles';\r\n        const obj = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'post',\r\n            body: JSON.stringify({puzzle, level, puzzleId, token, id})\r\n        };\r\n\r\n        let resp = await fetch(url, obj)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error: Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n    }\r\n\r\n    async function onUpdatePuzzle(evt){\r\n        const puzzle = puzzleInfo.puzzle; \r\n        const level = puzzleInfo.level; \r\n        const puzzleId = puzzleInfo.puzzleId;\r\n        const token = localStorage.getItem('token');\r\n        const id = localStorage.getItem('id');\r\n\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/saved-puzzles';\r\n        const obj = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'PATCH',\r\n            body: JSON.stringify({puzzle, level, puzzleId, token, id})\r\n        };\r\n        let resp = await fetch(url, obj)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error: Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n    }\r\n\r\n    async function onViewSavedPuzzles(evt){\r\n        setViewSavedPuzzles(value=>!value);\r\n    }\r\n\r\n    const logIn = <div id='login'>\r\n        <form onSubmit={submitLogin}>\r\n            <input type='text' placeholder='email' onChange={updateLogin} value={loginState.email} name='email' />\r\n            <input type='password' placeholder='password' onChange={updateLogin} value={loginState.password} name='password' />\r\n            <input type='submit' value='Log In' />\r\n            <span id='login-error' className={'warning'}></span>\r\n        </form>\r\n    </div>;\r\n\r\n    const register = <div id='register'>\r\n        <form onSubmit={submitRegister}>\r\n            <input type='text' placeholder='email' onChange={updateRegister} value={registerState.email} name='email' />\r\n            <input type='password' placeholder='password' onChange={updateRegister} value={registerState.password} name='password' />\r\n            <input type='submit' value='Register' />\r\n            <span id='register-error' className={'warning'}></span>\r\n        </form>\r\n    </div>;\r\n\r\n    const logOut = <button onClick={onLogOut}>Log Out</button>;\r\n    const savePuzzle = <button id='save-puzzle' onClick={onSavePuzzle} >Save Puzzle</button>;\r\n    const viewSavedPuzzles = <button id='view-saved-puzzles' onClick={onViewSavedPuzzles}>View Saved Puzzles</button>;\r\n    const updatePuzzle = <button id='update-puzzle' onClick={onUpdatePuzzle}>Update Puzzle</button>\r\n    return (\r\n        <nav>\r\n            {(!loggedInStatus) ? logIn : logOut}\r\n            {(!loggedInStatus) ? register : null}\r\n            {(loggedInStatus && !isSavedPuzzleUsed) ? savePuzzle : null}\r\n            {(loggedInStatus && isSavedPuzzleUsed) ? updatePuzzle : null}\r\n            {(loggedInStatus) ? viewSavedPuzzles : null}\r\n        </nav>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nexport default NavBar;","import React, { useEffect } from \"react\";\r\nimport { convertTo2DArray } from \"../helpers\";\r\n\r\nconst SavedPuzzles = ({setPuzzleInfo, setViewSavedPuzzles, setIsSavedPuzzleUsed}) => {\r\n    const [savedPuzzles, setSavedPuzzles] = React.useState([]);\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        async function loadSavedPuzzles() {\r\n            const id = localStorage.getItem('id');\r\n            const token = localStorage.getItem('token');\r\n            const url = 'https://steven-sudoku-api.herokuapp.com/saved-puzzles/' + id + '?token=' + token;\r\n\r\n            let resp = await fetch(url)\r\n                .then(resp => {\r\n                    if (!resp.ok) {\r\n                        throw new Error('Error Status', resp.status);\r\n                    }\r\n                    return resp.json();\r\n                })\r\n                .then(data => data)\r\n                .catch(err => console.error(err));\r\n            setSavedPuzzles(resp.puzzles);\r\n        }\r\n        loadSavedPuzzles();\r\n    }, [savedPuzzles]);\r\n\r\n\r\n    async function onLoadPuzzle({target}){\r\n        const level = target.getAttribute('data-level');\r\n        let puzzle = target.getAttribute('data-puzzle');\r\n        puzzle = convertTo2DArray(puzzle);\r\n        const puzzleId = target.getAttribute('data-puzzle-id');\r\n        setPuzzleInfo({level, puzzle, puzzleId});\r\n        setViewSavedPuzzles(val=>!val);\r\n        setIsSavedPuzzleUsed(true);\r\n    }\r\n\r\n    const puzzleList = savedPuzzles.map(puzzle => {\r\n        return <li onClick={onLoadPuzzle} data-level={puzzle.level} data-puzzle={puzzle.puzzle} data-puzzle-id={puzzle.puzzle_id}>Puzzle Level {puzzle.level}</li>;\r\n    });\r\n\r\n    return (<div id='saved-puzzles'>\r\n        <h2>Saved Puzzles</h2>\r\n        {(savedPuzzles) ? <ul>{puzzleList}</ul> : <p>No puzzles saved</p>}\r\n    </div>);\r\n};\r\n\r\n\r\nexport default SavedPuzzles;","import './App.css';\nimport React from 'react';\nimport SudokuBoard from './SudokuBoard/SudokuBoard.js';\nimport NavBar from './NavBar/NavBar';\nimport SavedPuzzles from './SavedPuzzles/SavedPuzzles';\n\nfunction App() {\n  const [puzzleInfo, setPuzzleInfo] = React.useState(null); \n  const [viewSavedPuzzles, setViewSavedPuzzles] = React.useState(false);\n  const [isSavedPuzzleUsed, setIsSavedPuzzleUsed] = React.useState(false);\n\n  return (<>\n            <NavBar isSavedPuzzleUsed={isSavedPuzzleUsed} puzzleInfo={puzzleInfo} setViewSavedPuzzles={setViewSavedPuzzles} />\n            {(!viewSavedPuzzles) ?  <SudokuBoard setIsSavedPuzzleUsed={setIsSavedPuzzleUsed} setPuzzleInfo={setPuzzleInfo} puzzleInfo={puzzleInfo} /> : <SavedPuzzles setIsSavedPuzzleUsed={setIsSavedPuzzleUsed} setPuzzleInfo={setPuzzleInfo} setViewSavedPuzzles={setViewSavedPuzzles} />}\n  </>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}