{"version":3,"sources":["SudokuCell/SudokuCell.js","SudokuGrid/SudokuGrid.js","helpers.js","SudokuPad/SudokuPad.js","MagnifiedCell/MagnifiedCell.js","HintBox/HintBox.js","SudokuBoard/SudokuBoard.js","NavBar/NavBar.js","SavedPuzzles/SavedPuzzles.js","App.js","reportWebVitals.js","index.js"],"names":["SudokuCell","cellRow","cellCol","value","given","notGiven","upperCellClasses","id","className","SudokuGrid","setSelectedCell","sudoku","originalSudoku","invalidCell","hintCell","setHintCell","gridDiv","React","useRef","gridArray","i","j","push","useEffect","current","document","getElementById","onClick","target","parentElement","classList","remove","getAttribute","querySelector","focus","children","childrenLength","length","selectedCell","child","add","level","a","url","fetch","then","resp","ok","Error","status","json","data","catch","err","console","error","puzzle","getSpecificPuzzle","flattenPuzzle","flatPuzzle","join","copySudoku","copy","row","convertTo2DArray","split","puzzleArray","shift","getPuzzle","SudokuPad","setSudoku","update","setPuzzleInfo","cellValuesToggleButton","notesToggleButton","sudokuPadValues","sudokuPadNotes","onClickSudokuPadToggle","evt","setAttribute","removeAttribute","style","display","addEventListener","valueDivs","noteDivs","disabled","tabindex","contains","Number","col","upperCellOfSelectedCell","innerText","trim","puzzleInfo","newInfo","puzzleId","onKeyUp","key","includes","lowerCellOfSelectedCell","noteValue","lowerCellNotes","Math","random","lowerCellNotesLength","splice","sort","MagnifiedCell","HintBox","useState","hintMessage","setHintMessage","hintValue","setHintValue","position","solveWith","cellId","cell","pad","SudokuBoard","setIsSavedPuzzleUsed","setInvalidCell","valid","setValid","orignialSudoku","setLevel","setPuzzleId","messageDiv","testIfInvalid","reduce","b","areDuplicates","boxes","rowA","rowB","rowC","k","isBoardValid","isBoardFull","resetBoard","gridInd","magnifiedCell","originalPuzzle","loadPuzzle","for","onChange","NavBar","setViewSavedPuzzles","isSavedPuzzleUsed","viewSavedPuzzles","email","password","loginState","setLoginState","registerState","setRegisterState","loggedInStatus","setLoggedInStatus","preventDefault","obj","headers","method","body","JSON","stringify","success","localStorage","setItem","token","updateLogin","updateRegister","getItem","logIn","onSubmit","type","placeholder","name","register","logOut","removeItem","savePuzzle","viewSavedPuzzlesButton","updatePuzzle","href","SavedPuzzles","savedPuzzles","setSavedPuzzles","onLoadPuzzle","val","onDeletePuzzle","settings","puzzles","loadSavedPuzzles","puzzleList","map","puzzle_id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9266e69e.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './SudokuCell.css';\r\n\r\n\r\nconst SudokuCell = ({cellRow, cellCol, value, given})=>{\r\n    const notGiven = !given;\r\n    const upperCellClasses = (given) ? 'upper-cell given' : 'upper-cell';     \r\n    \r\n\r\n    return (<>\r\n                        <div id={'sudoku-cell-' + cellRow + '-' + cellCol} data-row={cellRow} data-col={cellCol} className='outer-cell' data-not-given={notGiven}>\r\n                            <div className={upperCellClasses}>{(value === '0') ? '' : value}</div>\r\n                            <div className='lower-cell' data-notes=''></div>\r\n                        </div>\r\n                    \r\n            </>);\r\n}; \r\n\r\n\r\n\r\nexport default SudokuCell;","import React from \"react\";\r\nimport SudokuCell from \"../SudokuCell/SudokuCell\";\r\nimport './SudokuGrid.css';\r\n\r\n\r\nconst SudokuGrid = ({ setSelectedCell, sudoku, originalSudoku, invalidCell, hintCell, setHintCell }) => {\r\n    const gridDiv = React.useRef(null);\r\n\r\n\r\n\r\n    function onClick({ target }) {\r\n        if (target !== gridDiv) {\r\n            target = target.parentElement;\r\n            if(hintCell && hintCell !== target){\r\n                    hintCell.classList.remove('hintCell'); \r\n                    setHintCell(null);\r\n            }\r\n\r\n            if (target.getAttribute('data-not-given') === 'false') return;\r\n\r\n            if (invalidCell && target !== invalidCell) {\r\n                document.querySelector('.sudoku-pad-values').focus();\r\n                return;\r\n            }\r\n\r\n            const children = gridDiv.current.children;\r\n            const childrenLength = children.length;\r\n            let selectedCell = null;\r\n            for (let i = 0; i < childrenLength; i++) {\r\n                const child = children[i];\r\n                if (child === target) {\r\n                    child.classList.add('selected-cell');\r\n                    selectedCell = child;\r\n                }\r\n                else {\r\n                    child.classList.remove('selected-cell');\r\n                }\r\n\r\n            }\r\n            setSelectedCell(selectedCell);\r\n            document.querySelector('.sudoku-pad-values').focus();\r\n        }\r\n    }\r\n\r\n    const gridArray = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            let given = (originalSudoku[i][j] !== '0') ? true : false;\r\n            gridArray.push(<SudokuCell key={i + '-' + j} cellRow={i} cellCol={j} value={sudoku[i][j]} given={given} />);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        gridDiv.current = document.getElementById('grid-div');\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div id='outer-grid-div'>\r\n            <div className='grid-hor-bar' id='grid-first-hor-bar'></div>\r\n            <div className='grid-hor-bar' id='grid-second-hor-bar'></div>\r\n            <div className='grid-ver-bar' id='grid-first-ver-bar'></div>\r\n            <div className='grid-ver-bar' id='grid-second-ver-bar'></div>\r\n            <div className='grid-div' id='grid-div' onClick={onClick}>\r\n                {gridArray}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SudokuGrid;","\r\n\r\nasync function getPuzzle(level) {\r\n    const url = 'https://steven-sudoku-api.herokuapp.com/sudoku?level=' + level;\r\n    const puzzle = await fetch(url)\r\n        .then(resp => {\r\n            if (!resp.ok) {\r\n                throw new Error(\"Error! Status:\", resp.status);\r\n            }\r\n            return resp.json();\r\n        })\r\n        .then(data => {\r\n            return data.data;\r\n        })\r\n        .catch(err => console.error(err));\r\n\r\n    return puzzle;\r\n}\r\n\r\nasync function getSpecificPuzzle(level,id) {\r\n    const url = 'https://steven-sudoku-api.herokuapp.com/sudoku/' + level + '/' + id;\r\n    const puzzle = await fetch(url)\r\n        .then(resp => {\r\n            if (!resp.ok) {\r\n                throw new Error(\"Error! Status:\", resp.status);\r\n            }\r\n            return resp.json();\r\n        })\r\n        .then(data => {\r\n            return data.data;\r\n        })\r\n        .catch(err => console.error(err));\r\n\r\n    return puzzle;\r\n}\r\n\r\nfunction flattenPuzzle(puzzle){\r\n    let flatPuzzle = [];\r\n    for(let i = 0; i < 9; i++){\r\n        flatPuzzle.push(...puzzle[i]);\r\n    }\r\n\r\n    return flatPuzzle.join(',');\r\n}\r\n\r\nfunction copySudoku(sudoku) {\r\n    const copy = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < 9; j++) {\r\n            row.push(sudoku[i][j]);\r\n        }\r\n        copy.push(row);\r\n    }\r\n    return copy;\r\n}\r\n\r\nfunction isBoardFull(sudoku) {\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            if (sudoku[i][j] === '0') return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction isBoardValid(sudoku) {\r\n    // check by rows\r\n    for (let i = 0; i < 9; i++) {\r\n        let row = sudoku[i];\r\n\r\n        // test if any duplicates occur\r\n        const count = row.reduce((a, b) => {\r\n            if (b === '0') return a;\r\n            if (a[b]) {\r\n                a.areDuplicates = true;\r\n            }\r\n            else {\r\n                a[b] = 1;\r\n            }\r\n            return a;\r\n        }, {});\r\n\r\n        if (count.areDuplicates) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n        // get columns\r\n        let col = [];\r\n        for (let j = 0; j < 9; j++) {\r\n            col.push(sudoku[j][i]);\r\n        }\r\n\r\n        // test if any duplicates occur\r\n        const count = col.reduce((a, b) => {\r\n            if (b === '0') return a;\r\n            if (a[b]) {\r\n                a.areDuplicates = true;\r\n            }\r\n            else {\r\n                a[b] = 1;\r\n            }\r\n            return a;\r\n        }, {});\r\n\r\n        if (count.areDuplicates) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 9; i += 3) {\r\n        // get boxes\r\n        let boxes = [[], [], []];\r\n        for (let j = 0; j < 3; j++) {\r\n            const rowA = [];\r\n            const rowB = [];\r\n            const rowC = [];\r\n            for (let k = 0; k < 3; k++) {\r\n                rowA.push(sudoku[j + i][k]);\r\n                rowB.push(sudoku[j + i][k + 3]);\r\n                rowC.push(sudoku[j + i][k + 6]);\r\n\r\n            }\r\n            boxes[0].push(...rowA);\r\n            boxes[1].push(...rowB);\r\n            boxes[2].push(...rowC);\r\n        }\r\n        for (let box of boxes) {\r\n            //test if any duplicates occur \r\n            // test if any duplicates occur\r\n            const count = box.reduce((a, b) => {\r\n                if (b === '0') return a;\r\n                if (a[b]) {\r\n                    a.areDuplicates = true;\r\n                }\r\n                else {\r\n                    a[b] = 1;\r\n                }\r\n                return a;\r\n            }, {});\r\n\r\n            if (count.areDuplicates) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction convertTo2DArray(puzzle){\r\n    puzzle = puzzle.split(',');\r\n    let puzzleArray = [];\r\n    for(let i = 0; i < 9; i++){\r\n        let row = [];\r\n        for(let j = 0; j < 9; j++){\r\n            row.push(puzzle.shift()); \r\n        }\r\n        puzzleArray.push(row);\r\n    }\r\n    return puzzleArray; \r\n}\r\n\r\nexport default getPuzzle;\r\nexport { copySudoku, isBoardFull, isBoardValid, flattenPuzzle, convertTo2DArray, getSpecificPuzzle };","import React from \"react\";\r\nimport './SudokuPad.css';\r\nimport { copySudoku } from '../helpers';\r\n\r\n\r\nconst SudokuPad = ({ selectedCell, sudoku, setSudoku, update, setPuzzleInfo}) => {\r\n    const cellValuesToggleButton = React.useRef(null);\r\n    const notesToggleButton = React.useRef(null);\r\n    const sudokuPadValues = React.useRef(null);\r\n    const sudokuPadNotes = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        cellValuesToggleButton.current = document.getElementById('sudoku-pad-cell-values-toggle-button');\r\n        cellValuesToggleButton.current.addEventListener('click', onClickSudokuPadToggle);\r\n        notesToggleButton.current = document.getElementById('sudoku-pad-notes-toggle-button');\r\n        sudokuPadValues.current = document.getElementById('sudoku-pad-values');\r\n        sudokuPadNotes.current = document.getElementById('sudoku-pad-notes');\r\n        sudokuPadNotes.current.style.display = 'none';\r\n    }, [])\r\n\r\n    function onClickValue({ target }) {\r\n        if (!target.classList.contains('sudoku-pad-digit-button')) return;\r\n        if (!selectedCell) return;\r\n        const row = Number(selectedCell.getAttribute('data-row'));\r\n        const col = Number(selectedCell.getAttribute('data-col'));\r\n\r\n        const upperCellOfSelectedCell = selectedCell.children[0];\r\n        const value = target.innerText;\r\n        if (upperCellOfSelectedCell.innerText.trim() === value) {\r\n            upperCellOfSelectedCell.innerText = '';\r\n            sudoku[row][col] = '0';\r\n            setSudoku(copySudoku(sudoku));\r\n            setPuzzleInfo(puzzleInfo => {\r\n                const newInfo = {};\r\n                newInfo.puzzleId = puzzleInfo.puzzleId; \r\n                newInfo.level = puzzleInfo.level; \r\n                newInfo.puzzle = copySudoku(sudoku); \r\n                return newInfo;\r\n            });\r\n            return;\r\n        }\r\n\r\n        upperCellOfSelectedCell.innerText = value;\r\n        sudoku[row][col] = value;\r\n        setSudoku(copySudoku(sudoku));\r\n        setPuzzleInfo(puzzleInfo => {\r\n            const newInfo = {};\r\n            newInfo.puzzleId = puzzleInfo.puzzleId; \r\n            newInfo.level = puzzleInfo.level; \r\n            newInfo.puzzle = copySudoku(sudoku); \r\n            return newInfo;\r\n        });\r\n\r\n    }\r\n\r\n\r\n    function onKeyUp(evt) {\r\n        if (!selectedCell) return;\r\n        const key = evt.key;\r\n        if (!['1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(key)) {\r\n            return;\r\n        }\r\n        const row = Number(selectedCell.getAttribute('data-row'));\r\n        const col = Number(selectedCell.getAttribute('data-col'));\r\n        const upperCellOfSelectedCell = selectedCell.children[0];\r\n        if (upperCellOfSelectedCell.innerText.trim() === key) {\r\n            upperCellOfSelectedCell.innerText = '';\r\n            sudoku[row][col] = '0';\r\n            setSudoku(copySudoku(sudoku));\r\n            setPuzzleInfo(puzzleInfo => {\r\n                const newInfo = {};\r\n                newInfo.puzzleId = puzzleInfo.puzzleId; \r\n                newInfo.level = puzzleInfo.level; \r\n                newInfo.puzzle = copySudoku(sudoku); \r\n                return newInfo;\r\n            });\r\n            return;\r\n        }\r\n        upperCellOfSelectedCell.innerText = key;\r\n        sudoku[row][col] = key;\r\n        setSudoku(copySudoku(sudoku));\r\n        setPuzzleInfo(puzzleInfo => {\r\n            const newInfo = {};\r\n            newInfo.puzzleId = puzzleInfo.puzzleId; \r\n            newInfo.level = puzzleInfo.level; \r\n            newInfo.puzzle = copySudoku(sudoku); \r\n            return newInfo;\r\n        });\r\n    }\r\n\r\n    function onClickNote({ target }) {\r\n        if (!target.classList.contains('sudoku-pad-digit-button')) return;\r\n        if (!selectedCell) return;\r\n\r\n        const lowerCellOfSelectedCell = selectedCell.children[1];\r\n        const noteValue = target.innerText.trim();\r\n        let lowerCellNotes = lowerCellOfSelectedCell.getAttribute('data-notes');\r\n        if (!lowerCellNotes) {\r\n            lowerCellOfSelectedCell.setAttribute('data-notes', noteValue);\r\n            lowerCellOfSelectedCell.innerText = noteValue;\r\n            update(Math.random());\r\n            return;\r\n        }\r\n        lowerCellNotes = lowerCellNotes.split(',');\r\n        let lowerCellNotesLength = lowerCellNotes.length;\r\n        for (let i = 0; i < lowerCellNotesLength; i++) {\r\n            if (lowerCellNotes[i] === noteValue) {\r\n                lowerCellNotes.splice(i, 1);\r\n                lowerCellNotes.sort();\r\n                lowerCellOfSelectedCell.innerText = lowerCellNotes.join(' ');\r\n                lowerCellOfSelectedCell.setAttribute('data-notes', lowerCellNotes.join(','));\r\n                update(Math.random());\r\n                return;\r\n            }\r\n        }\r\n        lowerCellNotes.push(noteValue);\r\n        lowerCellNotes.sort();\r\n        lowerCellOfSelectedCell.innerText = lowerCellNotes.join(' ');\r\n        lowerCellOfSelectedCell.setAttribute('data-notes', lowerCellNotes.join(','));\r\n        update(Math.random());\r\n    }\r\n\r\n\r\n\r\n    function onClickSudokuPadToggle(evt) {\r\n        if (cellValuesToggleButton.current === evt.target) {\r\n            cellValuesToggleButton.current.setAttribute('disabled', true);\r\n            notesToggleButton.current.removeAttribute('disabled');\r\n            sudokuPadValues.current.style.display = '';\r\n            sudokuPadNotes.current.style.display = 'none';\r\n\r\n            sudokuPadValues.current.focus();\r\n        }\r\n        else {\r\n            notesToggleButton.current.setAttribute('disabled', true);\r\n            cellValuesToggleButton.current.removeAttribute('disabled');\r\n            sudokuPadNotes.current.style.display = '';\r\n            sudokuPadValues.current.style.display = 'none';\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const valueDivs = [];\r\n    const noteDivs = [];\r\n    for (let i = 1; i < 10; i++) {\r\n        valueDivs.push(<div className='sudoku-pad-digit-button'>{i}</div>);\r\n        noteDivs.push(<div className='sudoku-pad-digit-button' >{i}</div>);\r\n    }\r\n\r\n    return (\r\n        <div className={'sudoku-pad'}>\r\n            <div id='sudoku-pad-buttons'>\r\n                <button id='sudoku-pad-cell-values-toggle-button' disabled>Cell Values</button>\r\n                <button id=\"sudoku-pad-notes-toggle-button\" onClick={onClickSudokuPadToggle} >Notes</button>\r\n            </div>\r\n            <div tabindex='0' onClick={onClickValue} onKeyUp={onKeyUp} id='sudoku-pad-values' className='sudoku-pad-values'>\r\n                {valueDivs}\r\n            </div>\r\n            <div onClick={onClickNote} className='sudoku-pad-notes' id='sudoku-pad-notes'>\r\n                {noteDivs}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SudokuPad;","import React from 'react';\r\nimport './MagnifiedCell.css'; \r\n\r\n\r\nconst MagnifiedCell = ({selectedCell})=>{\r\n    return (\r\n        <div className='magnified-cell' id='magnified-cell'>\r\n            <div className='magnified-cell-upper-cell'>\r\n                {selectedCell.children[0].innerText}\r\n            </div>\r\n            <div className='magnified-cell-lower-cell'>\r\n                {selectedCell.children[1].innerText}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default MagnifiedCell; ","import React, { useState } from \"react\";\r\nimport { flattenPuzzle } from \"../helpers\";\r\nimport './HintBox.css';\r\n\r\nconst HintBox = ({ setSelectedCell, setHintCell, selectedCell, hintCell, sudoku }) => {\r\n    const [hintMessage, setHintMessage] = useState(null);\r\n    const [hintValue, setHintValue] = useState(null);\r\n\r\n    async function getHint(evt) {\r\n        const flatPuzzle = flattenPuzzle(sudoku);\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/sudoku/analysis?puzzle=' + flatPuzzle;\r\n        const data = await fetch(url)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error! Status:', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n        if (data) {\r\n\r\n            const { position, value, solveWith } = data.data;\r\n\r\n            const cellId = '#sudoku-cell-' + (position[0] - 1) + '-' + (position[1] - 1);\r\n            const cell = document.querySelector(cellId);\r\n\r\n            if (hintCell) {\r\n                hintCell.classList.remove('hintCell');\r\n                setHintCell(null);\r\n                return;\r\n            }\r\n\r\n            cell.classList.add('hintCell');\r\n            setHintCell(cell);\r\n            if (selectedCell) {\r\n                selectedCell.classList.remove('selected-cell');\r\n            }\r\n            setSelectedCell(cell);\r\n\r\n            document.querySelector('#sudoku-pad-values').focus();\r\n\r\n            let message = 'The green cell can be solved with ' + solveWith;\r\n            setHintMessage(message);\r\n            setHintValue(value);\r\n        }\r\n    }\r\n\r\n    function viewSolution(evt) {\r\n        const solution = document.querySelector('#solution');\r\n        solution.innerText = hintValue;\r\n        const pad = document.querySelector('.sudoku-pad-values');\r\n        if (pad) {\r\n            pad.focus();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={getHint} id='hint-button'>Hint</button>\r\n            <div className='hint-message'>\r\n                {(hintCell) ? hintMessage : ''}\r\n                {(hintCell) ? <button onClick={viewSolution} className='solution-button'>See Solution</button> : ''}\r\n                {(hintCell) ? <div id='solution'></div> : ''}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default HintBox;","import React from \"react\";\r\nimport SudokuGrid from \"../SudokuGrid/SudokuGrid\";\r\nimport SudokuPad from \"../SudokuPad/SudokuPad\";\r\nimport MagnifiedCell from \"../MagnifiedCell/MagnifiedCell\";\r\nimport getPuzzle, { copySudoku, isBoardFull, isBoardValid, flattenPuzzle, getSpecificPuzzle } from \"../helpers\";\r\nimport './SudokuBoard.css';\r\nimport HintBox from \"../HintBox/HintBox\";\r\n\r\nconst SudokuBoard = ({ puzzleInfo, setPuzzleInfo, setIsSavedPuzzleUsed }) => {\r\n    const [selectedCell, setSelectedCell] = React.useState(null);\r\n    const [invalidCell, setInvalidCell] = React.useState(null);\r\n    const [valid, setValid] = React.useState(true);\r\n    const orignialSudoku = React.useRef(null);\r\n    const [sudoku, setSudoku] = React.useState(null);\r\n    const [hintCell, setHintCell] = React.useState(null);\r\n    const [level, setLevel] = React.useState(null);\r\n    const [puzzleId, setPuzzleId] = React.useState(null);\r\n    const messageDiv = React.useRef(document.getElementById('message-div'));\r\n\r\n\r\n    // for updating entire board from within child\r\n    const [_, update] = React.useState(null);\r\n\r\n    if (sudoku) {\r\n        const testIfInvalid = isBoardValid(sudoku);\r\n        if (valid && !testIfInvalid) {\r\n            selectedCell.classList.add('invalid-cell');\r\n            setValid(false);\r\n            setInvalidCell(selectedCell);\r\n        }\r\n        else if (!valid && testIfInvalid) {\r\n            invalidCell.classList.remove('invalid-cell');\r\n            setValid(true);\r\n            setInvalidCell(null);\r\n        }\r\n\r\n        if (isBoardFull(sudoku) && valid) {\r\n            if (messageDiv.current) {\r\n                messageDiv.current.innerText = 'You Win!';\r\n            }\r\n        }\r\n        else {\r\n            if (messageDiv.current) {\r\n                messageDiv.current.innerText = '';\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function resetBoard(puzzle) {\r\n        // reset grid\r\n        const gridDiv = document.querySelector('#grid-div');\r\n        let children = gridDiv.children;\r\n        let gridInd = null ;\r\n        for(let i = 0; i < 9; i++){\r\n            for(let j = 0; j < 9; j++){\r\n                if(gridInd === null)  gridInd = 0; \r\n                const cell = children[gridInd];\r\n                cell.children[1].innerText = '';\r\n\r\n\r\n                if(puzzle[i][j] === '0'){\r\n                    cell.children[0].innerText = '';\r\n                }\r\n\r\n                gridInd++; \r\n            }\r\n        }\r\n\r\n        // reset selectedCell\r\n        if (selectedCell) {\r\n            selectedCell.classList.remove('selected-cell');\r\n            setSelectedCell(null);\r\n        }\r\n\r\n        // reset hintCell \r\n        if (hintCell) {\r\n            hintCell.classList.remove('hintCell');\r\n            setHintCell(null);\r\n        }\r\n\r\n        // reset magnified cell\r\n        const magnifiedCell = document.getElementById('magnified-cell');\r\n        if (magnifiedCell) {\r\n            magnifiedCell.children[0].innerText = '';\r\n            magnifiedCell.children[1].innerText = '';\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    async function selectPuzzle(evt) {\r\n        let level = evt.target.value;\r\n\r\n        const data = await getPuzzle(level);\r\n        const puzzle = data.puzzle;\r\n        resetBoard(puzzle);\r\n\r\n        orignialSudoku.current = puzzle;\r\n        setSudoku(copySudoku(puzzle));\r\n        setPuzzleId(data.puzzleId);\r\n        setLevel(level);\r\n        if (setPuzzleInfo) {\r\n            setPuzzleInfo({ puzzle: copySudoku(puzzle), level, puzzleId: data.puzzleId });\r\n        }\r\n        if (setIsSavedPuzzleUsed) {\r\n            setIsSavedPuzzleUsed(false);\r\n        }\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        async function loadPuzzle() {\r\n            let puzzle = null;\r\n            let level = null;\r\n            let puzzleId = null;\r\n\r\n            let originalPuzzle = null;\r\n            if (!puzzleInfo) {\r\n                level = 'one';\r\n                const data = await getPuzzle(level);\r\n                puzzleId = data.puzzleId;\r\n                puzzle = data.puzzle;\r\n\r\n                originalPuzzle = puzzle;\r\n            }\r\n            else {\r\n                level = puzzleInfo.level;\r\n                puzzle = puzzleInfo.puzzle;\r\n                puzzleId = puzzleInfo.puzzleId;\r\n\r\n                originalPuzzle = await getSpecificPuzzle(level, puzzleId); \r\n                originalPuzzle = originalPuzzle.puzzle; \r\n            }\r\n            orignialSudoku.current = originalPuzzle;\r\n            setSudoku(copySudoku(puzzle));\r\n            setPuzzleId(puzzleId);\r\n            setLevel(level);\r\n            if (setPuzzleInfo) {\r\n                setPuzzleInfo({ puzzle: copySudoku(puzzle), level, puzzleId });\r\n            }\r\n        }\r\n        loadPuzzle();\r\n    }, []);\r\n\r\n    if (!sudoku) return '';\r\n\r\n    return (\r\n        <div className='sudoku-board'>\r\n\r\n            <div className='sudoku-board-sudoku-grid'>\r\n                <SudokuGrid setHintCell={setHintCell} hintCell={hintCell} setSelectedCell={setSelectedCell} invalidCell={invalidCell} sudoku={sudoku} originalSudoku={orignialSudoku.current} />\r\n            </div>\r\n            <div className='difficulty-selector'>\r\n                <label for='difficulty-selector'>Difficulty: </label>\r\n                <select id='difficulty-selector' className='sudoku-board-select' onChange={selectPuzzle}>\r\n                    <option value='one'>Level One</option>\r\n                    <option value='two'>Level Two</option>\r\n                    <option value='three'>Level Three</option>\r\n                </select>\r\n            </div>\r\n            <div className='hint-box'>\r\n                <HintBox sudoku={sudoku} selectedCell={selectedCell} hintCell={hintCell} setHintCell={setHintCell} setSelectedCell={setSelectedCell} />\r\n            </div>\r\n            {selectedCell ? <div className='sudoku-board-magnified-cell'><MagnifiedCell selectedCell={selectedCell} /></div> : null}\r\n            <div className='clearFloat'></div>\r\n\r\n            <div className='sudoku-board-sudoku-pad'>\r\n                <SudokuPad selectedCell={selectedCell} setPuzzleInfo={setPuzzleInfo} update={update} sudoku={sudoku} setSudoku={setSudoku} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport default SudokuBoard;","import React from \"react\";\r\nimport { flattenPuzzle } from \"../helpers\";\r\nimport './NavBar.css';\r\n\r\n\r\nconst NavBar = ({ puzzleInfo, setViewSavedPuzzles, isSavedPuzzleUsed, viewSavedPuzzles }) => {\r\n    const [loginState, setLoginState] = React.useState({ email: '', password: '' });\r\n    const [registerState, setRegisterState] = React.useState({ email: '', password: '' });\r\n    const [loggedInStatus, setLoggedInStatus] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        if (localStorage.getItem('token')) {\r\n            setLoggedInStatus(true);\r\n        }\r\n    }, []);\r\n\r\n    async function submitLogin(evt) {\r\n        evt.preventDefault();\r\n\r\n        let email = evt.target.querySelector('input[name=\"email\"]');\r\n        let password = evt.target.querySelector('input[name=\"password\"]');\r\n\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/authenticate/login';\r\n        const obj = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'post',\r\n            body: JSON.stringify({ password: password.value, email: email.value })\r\n        };\r\n\r\n        let resp = await fetch(url, obj)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error: Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n        if (resp && resp.success) {\r\n            localStorage.setItem('token', resp.token);\r\n            localStorage.setItem('id', resp.id);\r\n            email.value = '';\r\n            password.value = '';\r\n            document.getElementById('login-error').innerText = '';\r\n            setLoggedInStatus(true);\r\n        }\r\n        else {\r\n            document.getElementById('login-error').innerText = 'Invalid credentials';\r\n        }\r\n    }\r\n\r\n    function updateLogin(evt) {\r\n        const obj = {};\r\n        let email = evt.target.parentElement.querySelector('input[name=\"email\"]');\r\n        let password = evt.target.parentElement.querySelector('input[name=\"password\"]');\r\n        obj.email = email.value;\r\n        obj.password = password.value;\r\n        setLoginState(obj);\r\n    }\r\n\r\n    async function submitRegister(evt) {\r\n        evt.preventDefault();\r\n\r\n        let email = evt.target.querySelector('input[name=\"email\"]');\r\n        let password = evt.target.querySelector('input[name=\"password\"]');\r\n\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/authenticate/create-user';\r\n        const obj = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'post',\r\n            body: JSON.stringify({ password: password.value, email: email.value })\r\n        };\r\n\r\n        let resp = await fetch(url, obj)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error: Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n        if (resp && resp.success) {\r\n            localStorage.setItem('token', resp.token);\r\n            email.value = '';\r\n            password.value = '';\r\n            document.getElementById('register-error').innerText = '';\r\n            setLoggedInStatus(true);\r\n        }\r\n        else {\r\n            document.getElementById('register-error').innerText = 'Invalid credentials';\r\n        }\r\n    }\r\n\r\n    function updateRegister(evt) {\r\n        const obj = {};\r\n        let email = evt.target.parentElement.querySelector('input[name=\"email\"]');\r\n        let password = evt.target.parentElement.querySelector('input[name=\"password\"]');\r\n        obj.email = email.value;\r\n        obj.password = password.value;\r\n        setRegisterState(obj);\r\n    }\r\n\r\n    function onLogOut(evt) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('id');\r\n        setLoggedInStatus(false);\r\n        setLoginState({email: '', password: ''});\r\n        setRegisterState({email: '', password: ''});\r\n    }\r\n\r\n    async function onSavePuzzle(evt) {\r\n        const puzzle = puzzleInfo.puzzle;\r\n        const level = puzzleInfo.level;\r\n        const puzzleId = puzzleInfo.puzzleId;\r\n        const token = localStorage.getItem('token');\r\n        const id = localStorage.getItem('id');\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/saved-puzzles';\r\n        const obj = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'POST',\r\n            body: JSON.stringify({ puzzle, level, puzzleId, token, id })\r\n        };\r\n\r\n        let resp = await fetch(url, obj)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error: Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n    }\r\n\r\n    async function onUpdatePuzzle(evt) {\r\n        const puzzle = puzzleInfo.puzzle;\r\n        const level = puzzleInfo.level;\r\n        const puzzleId = puzzleInfo.puzzleId;\r\n        const token = localStorage.getItem('token');\r\n        const id = localStorage.getItem('id');\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/saved-puzzles';\r\n        const obj = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'PATCH',\r\n            body: JSON.stringify({ puzzle, level, puzzleId, token, id })\r\n        };\r\n        let resp = await fetch(url, obj)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error: Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n    }\r\n\r\n    async function onViewSavedPuzzles(evt) {\r\n        if(!viewSavedPuzzles){\r\n           evt.target.innerText = 'Back To Puzzle';  \r\n        }\r\n        else{\r\n            evt.target.innerText = 'View Saved Puzzles';\r\n        }\r\n        setViewSavedPuzzles(value => !value);\r\n    }\r\n\r\n    const logIn = <div id='login'>\r\n        <form onSubmit={submitLogin}>\r\n            <input type='text' placeholder='email' onChange={updateLogin} value={loginState.email} name='email' />\r\n            <input type='password' placeholder='password' onChange={updateLogin} value={loginState.password} name='password' />\r\n            <input type='submit' value='Log In' />\r\n            <span id='login-error' className={'warning'}></span>\r\n        </form>\r\n    </div>;\r\n\r\n    const register = <div id='register'>\r\n        <form onSubmit={submitRegister}>\r\n            <input type='text' placeholder='email' onChange={updateRegister} value={registerState.email} name='email' />\r\n            <input type='password' placeholder='password' onChange={updateRegister} value={registerState.password} name='password' />\r\n            <input type='submit' value='Register' />\r\n            <span id='register-error' className={'warning'}></span>\r\n        </form>\r\n    </div>;\r\n\r\n    const logOut = <button onClick={onLogOut}>Log Out</button>;\r\n    const savePuzzle = <button id='save-puzzle' onClick={onSavePuzzle} >Save Puzzle</button>;\r\n    const viewSavedPuzzlesButton = <button id='view-saved-puzzles' onClick={onViewSavedPuzzles}>View Saved Puzzles</button>;\r\n    const updatePuzzle = <button id='update-puzzle' onClick={onUpdatePuzzle}>Update Puzzle</button>\r\n    return (\r\n        <nav>\r\n            Play Sudoku \r\n            {(!loggedInStatus) ? logIn : logOut}\r\n            {(!loggedInStatus) ? register : null}\r\n            {(loggedInStatus && !isSavedPuzzleUsed) ? savePuzzle : null}\r\n            {(loggedInStatus && isSavedPuzzleUsed) ? updatePuzzle : null}\r\n            {(loggedInStatus) ? viewSavedPuzzlesButton : null}\r\n            <button><a href='https://orangehoodie240.github.io/sudoku_tutorial/' target=\"_blank\">Tutorial</a></button>\r\n        </nav>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nexport default NavBar;","import React, { useEffect } from \"react\";\r\nimport { convertTo2DArray } from \"../helpers\";\r\n\r\nconst SavedPuzzles = ({ setPuzzleInfo, setViewSavedPuzzles, setIsSavedPuzzleUsed }) => {\r\n    const [savedPuzzles, setSavedPuzzles] = React.useState([]);\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        async function loadSavedPuzzles() {\r\n            const id = localStorage.getItem('id');\r\n            const token = localStorage.getItem('token');\r\n            const url = 'https://steven-sudoku-api.herokuapp.com/saved-puzzles/' + id + '?token=' + token;\r\n\r\n            let resp = await fetch(url)\r\n                .then(resp => {\r\n                    if (!resp.ok) {\r\n                        throw new Error('Error Status', resp.status);\r\n                    }\r\n                    return resp.json();\r\n                })\r\n                .then(data => data)\r\n                .catch(err => console.error(err));\r\n            setSavedPuzzles(resp.puzzles);\r\n        }\r\n        loadSavedPuzzles();\r\n    }, []);\r\n\r\n\r\n    async function onLoadPuzzle({ target }) {\r\n        target = target.parentElement;\r\n        const level = target.getAttribute('data-level');\r\n        let puzzle = target.getAttribute('data-puzzle');\r\n        puzzle = convertTo2DArray(puzzle);\r\n        const puzzleId = target.getAttribute('data-puzzle-id');\r\n        setPuzzleInfo({ level, puzzle, puzzleId });\r\n        setViewSavedPuzzles(val => !val);\r\n        setIsSavedPuzzleUsed(true);\r\n        document.getElementById('view-saved-puzzles').innerText = 'View Saved Puzzles';\r\n    }\r\n\r\n\r\n    async function onDeletePuzzle({ target }) {\r\n        target = target.parentElement;\r\n        const level = target.getAttribute('data-level');\r\n        const puzzleId = target.getAttribute('data-puzzle-id');\r\n\r\n        const url = 'https://steven-sudoku-api.herokuapp.com/saved-puzzles';\r\n        const token = localStorage.getItem('token');\r\n        const id = localStorage.getItem('id');\r\n\r\n        const settings = {\r\n            method: 'DELETE',\r\n            body: JSON.stringify({ token, id, level, puzzleId }),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n\r\n        await fetch(url, settings)\r\n            .then(resp => {\r\n                if (!resp.ok()) {\r\n                    throw new Error(\"Error Status: \", resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => data)\r\n            .catch(err => console.error(err));\r\n\r\n\r\n        let resp = await fetch(url + '/' + id + '?token=' + token)\r\n            .then(resp => {\r\n                if (!resp.ok) {\r\n                    throw new Error('Error Status', resp.status);\r\n                }\r\n                return resp.json();\r\n            })\r\n            .then(data => data)\r\n            .catch(err => console.error(err));\r\n        setSavedPuzzles(resp.puzzles);\r\n    }\r\n\r\n\r\n    const puzzleList = savedPuzzles.map(puzzle => {\r\n        return <li data-level={puzzle.level} data-puzzle={puzzle.puzzle} data-puzzle-id={puzzle.puzzle_id}>Puzzle Level {puzzle.level} <button onClick={onLoadPuzzle}>Load</button> <button onClick={onDeletePuzzle}>Delete</button></li>;\r\n    });\r\n\r\n    return (<div id='saved-puzzles'>\r\n        <h2>Saved Puzzles</h2>\r\n        {(savedPuzzles) ? <ul>{puzzleList}</ul> : <p>No puzzles saved</p>}\r\n    </div>);\r\n};\r\n\r\n\r\nexport default SavedPuzzles;","import './App.css';\nimport React from 'react';\nimport SudokuBoard from './SudokuBoard/SudokuBoard.js';\nimport NavBar from './NavBar/NavBar';\nimport SavedPuzzles from './SavedPuzzles/SavedPuzzles';\n\nfunction App() {\n  const [puzzleInfo, setPuzzleInfo] = React.useState(null); \n  const [viewSavedPuzzles, setViewSavedPuzzles] = React.useState(false);\n  const [isSavedPuzzleUsed, setIsSavedPuzzleUsed] = React.useState(false);\n\n  return (<>\n            <NavBar viewSavedPuzzles={viewSavedPuzzles} isSavedPuzzleUsed={isSavedPuzzleUsed} puzzleInfo={puzzleInfo} setViewSavedPuzzles={setViewSavedPuzzles} />\n            <div id='message-div'></div>\n            \n            {(!viewSavedPuzzles) ?  <SudokuBoard setIsSavedPuzzleUsed={setIsSavedPuzzleUsed} setPuzzleInfo={setPuzzleInfo} puzzleInfo={puzzleInfo} /> : <SavedPuzzles setIsSavedPuzzleUsed={setIsSavedPuzzleUsed} setPuzzleInfo={setPuzzleInfo} setViewSavedPuzzles={setViewSavedPuzzles} />}\n  </>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}